#!/usr/bin/env bash

case "$1" in
  '--firejail'|'--sandbox')
	if ! command -v firejail 1>/dev/null; then
		printf "\n%s\n" 'ERROR: "firejail" is not installed!'; deps=1
		[ "$deps" != "1" ] || { printf "\nInstall the above from your package manager and try again\n\n"; exit 1; }
	fi

	case $2 in
	'') 
		echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit;;
	esac

	while [ -n "$1" ]; do

		if ! test -f $APPSPATH/$2/remove; then
			echo " '$2' is not a valid argument or is not installed."; exit
		fi

		if [ -z "$(strings -d $APPSPATH/$2/"$2" 2>/dev/null | grep -F 'if you run it with the --appimage-extract option')" ]; then
	    		echo ' ERROR: "'$2'" is NOT an AppImage'; exit
	    	fi

		echo -e '---------------------------------------------------------------------\nYOU ARE USING FIREJAIL VIA "'$(echo $AMCLI | _make_upper)'".\n---------------------------------------------------------------------'

		if ! test -f $APPSPATH/$2/firejail.profile; then
			cp /etc/firejail/default.profile $APPSPATH/$2/firejail.profile
			echo -e "◆ Created $APPSPATH/$2/firejail.profile, do what you will with it! \n---------------------------------------------------------------------"
		fi

		DESKTOPFILEANDPATH=$(cat $APPSPATH/$2/remove | tr " " "\n" | grep "/share/applications" | head -1)

		if ! test -f $APPSPATH/$2/firejail.profile; then
			cp /etc/firejail/default.profile $APPSPATH/$2/firejail.profile
			echo -e "◆ Created $APPSPATH/$2/firejail.profile\n---------------------------------------------------------------------"
		else
			echo -e "◆ Found $APPSPATH/$2/firejail.profile\n---------------------------------------------------------------------"
		fi

		echo -e "\n Choose to run once using Firejail (options 1 & 2) or make the"
		echo " changes permanent by editing the available .desktop files, if"
		echo -e " available (options 3 & 4).\n\n"
		echo " NOTE, once that the .desktop files are patched, they will be"
		echo " saved in ~/.local/share/applications, which means that if you"
		echo " use AppMan, the originals will be overwritten."
		echo -e ' Supported text editors (option 5) are "vim" and "nano".\n'
		echo "1) Sandbox once using Firejail's defaults"
		echo "2) Sandbox once using the custom profile"
		echo "3) Patch the .desktop file using Firejail's defaults"
		echo "4) Patch the .desktop file using the custom profile"
		echo "5) Edit the custom $APPSPATH/$2/firejail.profile file\n"
		read -p 'CHOOSE BETWEEN 1, 2, 3, 4 AND 5, OR LEAVE BLANK TO EXIT: ' response

		case $response in

		1)	echo -e "\n############################### START FIREJAIL ###############################\n"
			firejail --appimage $APPSPATH/$2/$2
			echo -e "\n############################### STOP FIREJAIL ###############################\n"
			;;

		2)	echo -e "\n############################### START FIREJAIL ###############################\n"
			firejail --appimage --profile=$APPSPATH/$2/firejail.profile $APPSPATH/$2/$2
			echo -e "\n############################### STOP FIREJAIL ###############################\n"
			;;

		3)	mkdir -p "$DATADIR"/applications; mkdir -p .am-patchinglauncher
			cp $DESKTOPFILEANDPATH ./.am-patchinglauncher/
			for f in ./.am-patchinglauncher/*; do
				EXEC=$(grep -e '^Exec=.*' $f | head -n 1 | cut -d "=" -f 2- | sed -e 's|%.||g')
				sed -i "s#Exec=$CHANGEEXEC#Exec=firejail --appimage $APPSPATH/$2/$EXEC#g" ./$f
			done
			mv ./.am-patchinglauncher/* "$DATADIR"/applications/ 2> /dev/null;	rmdir .am-patchinglauncher
			break
			;;

		4)	mkdir -p "$DATADIR"/applications; mkdir -p .am-patchinglauncher
			cp $DESKTOPFILEANDPATH ./.am-patchinglauncher/
			for f in ./.am-patchinglauncher/*; do
				EXEC=$(grep -e '^Exec=.*' $f | head -n 1 | cut -d "=" -f 2- | sed -e 's|%.||g')
				sed -i "s#Exec=$CHANGEEXEC#Exec=firejail --appimage --profile=$APPSPATH/$2/firejail.profile $APPSPATH/$2/$EXEC#g" ./$f
			done
			mv ./.am-patchinglauncher/* "$DATADIR"/applications/ 2> /dev/null;	rmdir .am-patchinglauncher
			break
			;;

		5)	if command -v vim 1>/dev/null; then
				vim $APPSPATH/$2/firejail.profile
			else
				nano $APPSPATH/$2/firejail.profile
			fi
			;;

		*)	exit
			;;
		esac

	done

	shift
	;;

  '-H'|'--home')
	case $2 in
	'') echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit;;
	esac

	while [ -n "$1" ]; do
		rm -f $AMPATH/.cache/home-args
		echo "$@" | tr ' ' '\n' >> $AMPATH/.cache/home-args && echo STOP >> $AMPATH/.cache/home-args
		ARGS=$(tail -n +2 $AMPATH/.cache/home-args)
		for arg in $ARGS; do

			function _home(){
				cd $APPSPATH || return
				if ! test -d ./$arg; then
					echo ' ERROR: "'$arg'" is not installed'
				else
					case $arg in
					*)
						if [ -z "$(strings -d "./$arg/$arg" 2>/dev/null | grep -F 'if you run it with the --appimage-extract option')" ] 2>/dev/null; then
							echo ' ERROR: "'$arg'" is NOT an AppImage'
						else
							cd ./$arg || return
							mkdir -p ./$arg.home
							echo ' Setting $HOME to '$APPSPATH'/'$arg'/'$arg'.home for this AppImage'
						fi
					esac
				fi
			}

			if [ $arg == STOP ]; then
				exit
			else
				_home
			fi
		done
	done
	;;
esac
