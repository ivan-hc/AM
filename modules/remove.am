#!/usr/bin/env bash

function _remove_check_removals(){
	if test -f "$AMPATH"/.cache/unavailable-args; then
		printf '%-55s\n'
		if [ "$AMCLI" == am ] 2>/dev/null; then
			printf ' ðŸ’€ ERROR, the following programs you want to remove are NOT in %s :\n\n%s' "$APPSPATH" "$(sort < "$AMPATH"/.cache/unavailable-args)"
		else
			printf ' ðŸ’€ ERROR, the following programs you want to remove are NOT in\n    %s :\n\n%s' "$APPSPATH" "$(cat" $AMPAT"H/.cache/unavailable-args | sort)"
		fi
		printf '\n INVALID "APPNAME"!'
		printf '\n%-55s\n'
		echo ' â—† INSTALLED PROGRAMS/VALID ARGUMENTS (SEE THE "APPNAME" COLUMN):'
		"$AMCLIPATH" -f | grep -v "STANDALONE PROGRAMS MANAGED"
		rm "$AMPATH"/.cache/unavailable-args
		printf '%-55s\n'
		exit
	else
		exit
	fi
}

function _REMOVE(){
	if ls "$APPSPATH/$arg" > /dev/null 2>&1; then
		$SUDOCOMMAND "$APPSPATH/$arg"/remove && sleep 0.5 && printf ' â—† %s HAS BEEN SUCCESSFULLY REMOVED!' "$(echo "$arg" | _make_upper)"
	else
		echo " - $arg" >> "$AMPATH"/.cache/unavailable-args
	fi
}

function _remove(){
	if ls "$APPSPATH/$arg" > /dev/null 2>&1; then
		case $arg in
		*) 
			$SUDOCOMMAND echo "" > /dev/null; read -p " â—† DO YOU WISH TO REMOVE $(echo "$arg" | _make_upper) (Y,n)?" yn
			case $yn in
			[Nn]* ) 
				printf ' - %s HAS NOT BEEN REMOVED!\n' "$(echo "$arg" | _make_upper)"
				;;
			[Yy]*|* ) 
				$SUDOCOMMAND "$APPSPATH/$arg"/remove && sleep 0.5 && printf ' â—† %s HAS BEEN SUCCESSFULLY REMOVED!' "$(echo "$arg" | _make_upper)"
				;;
			esac
		esac
	else
		echo " - $arg" >> "$AMPATH"/.cache/unavailable-args
	fi
}

case $2 in
	'')
		echo " USAGE: $AMCLI $1 [ARGUMENT]"
		exit
		;;
esac

case "$1" in
	'-R') # THIS OPTION REMOVES PROGRAMS WITHOUT ASKING
		while [ -n "$1" ]; do
			rm -f "$AMPATH"/.cache/remove-args
			echo "$@" | tr ' ' '\n' >> "$AMPATH"/.cache/remove-args && echo STOP >> "$AMPATH"/.cache/remove-args
			ARGS=$(tail -n +2 "$AMPATH"/.cache/remove-args)
			for arg in $ARGS; do
				if [ "$arg" == STOP ]; then
					_remove_check_removals
				else
					_REMOVE
				fi
			done
		done
		shift
		;;

	'-r'|'remove') # THIS OPTION ALLOWS YOU TO CHOOSE WHETHER TO REMOVE PROGRAMS OR NOT
		while [ -n "$1" ]; do
			rm -f "$AMPATH"/.cache/remove-args
			echo "$@" | tr ' ' '\n' >> "$AMPATH"/.cache/remove-args && echo STOP >> "$AMPATH"/.cache/remove-args
			ARGS=$(tail -n +2 "$AMPATH"/.cache/remove-args)
			for arg in $ARGS; do
				if [ "$arg" == STOP ]; then
					_remove_check_removals
				else
					_remove
				fi
			done
		done
		shift
		;;
esac
