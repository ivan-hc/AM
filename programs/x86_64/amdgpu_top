#!/bin/sh

# AM INSTALL SCRIPT VERSION 3. 
set -u
APP=amdgpu_top
SITE="Umio-Yasuno/amdgpu_top"

# CREATE DIRECTORIES AND ADD REMOVER
[ -n "$APP" ] && mkdir -p "/opt/$APP/tmp" "/opt/$APP/icons" && cd "/opt/$APP/tmp" || exit 1
printf "#!/bin/sh\nset -e\nrm -f /usr/local/bin/$APP\nrm -R -f /opt/$APP" > "/opt/$APP/remove"
printf '\n%s' "rm -f /usr/share/applications/AM-$APP.desktop" >> "/opt/$APP/remove"
printf '\n%s' "rm -f /usr/share/applications/AM-$APP-TUI.desktop" >> "/opt/$APP/remove"
chmod a+x "/opt/$APP/remove"

# DOWNLOAD AND PREPARE THE APP, $version is also used for updates
version=$(curl -Ls https://api.github.com/repos/Umio-Yasuno/amdgpu_top/releases | sed 's/[()",{}]/ /g; s/ /\n/g' | grep -oi "https.*$APP.*appimage$" | head -1)
wget "$version" || exit 1
#wget "$version.zsync" 2> /dev/null # Comment out this line if you want to use zsync, warning that more often than not it is broken
# Use tar fx ./*tar* here for example in this line in case a compressed file is downloaded.
cd ..
mv ./tmp/*mage ./"$APP"
mv ./tmp/*.zsync ./"$APP".zsync 2>/dev/null
rm -R -f ./tmp || exit 1
echo "$version" > ./version
chmod a+x "/opt/$APP/$APP" || exit 1

# LINK TO PATH
ln -s "/opt/$APP/$APP" "/usr/local/bin/$APP"

# SCRIPT TO UPDATE THE PROGRAM
cat >> "/opt/$APP/AM-updater" << 'EOF'
#!/bin/sh
set -u
APP=amdgpu_top
SITE="Umio-Yasuno/amdgpu_top"
version0=$(cat "/opt/$APP/version")
version=$(curl -Ls https://api.github.com/repos/Umio-Yasuno/amdgpu_top/releases | sed 's/[()",{}]/ /g; s/ /\n/g' | grep -oi "https.*$APP.*appimage$" | head -1)
[ -n "$version" ] || { echo "Error getting link"; exit 1; }
if [ "$version" != "$version0" ] || [ -e /opt/"$APP"/*.zsync ]; then
	mkdir "/opt/$APP/tmp" && cd "/opt/$APP/tmp" || exit 1
	[ -e /opt/"$APP"/*.zsync ] || notify-send "A new version of $APP is available, please wait"
	[ -e /opt/"$APP"/*.zsync ] && wget "$version.zsync" 2>/dev/null || { wget "$version" || exit 1; }
	# Use tar fx ./*tar* here for example in this line in case a compressed file is downloaded.
	cd ..
	mv ./tmp/*.zsync ./"$APP".zsync 2>/dev/null || mv --backup=t ./tmp/*mage ./"$APP"
	[ -e /opt/"$APP"/*.zsync ] && { zsync "/opt/$APP/$APP.zsync" || notify-send -u critical "zsync failed to update $APP"; }
	chmod a+x "/opt/$APP/$APP" || exit 1
	echo "$version" > ./version
	rm -R -f ./*zs-old ./*.part ./tmp ./*~
	notify-send "$APP is updated!"
else
	echo "Update not needed!"
fi
EOF
chmod a+x "/opt/$APP/AM-updater"

# LAUNCHER & ICON
cd "/opt/$APP" || exit 1
./"$APP" --appimage-extract assets/*.desktop 1>/dev/null
mv squashfs-root/assets/amdgpu_top.desktop ./$APP.desktop
mv squashfs-root/assets/amdgpu_top-tui.desktop ./$APP-TUI.desktop
sed -i "s#Exec=$APP --gui#Exec=/opt/$APP/$APP --gui#g" ./$APP.desktop
sed -i "s#Exec=$APP#Exec=/opt/$APP/$APP#g" ./$APP-TUI.desktop
mv ./$APP.desktop /usr/share/applications/AM-$APP.desktop
mv ./$APP-TUI.desktop /usr/share/applications/AM-$APP-TUI.desktop
rm -R -f ./squashfs-root
