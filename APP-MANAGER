#!/usr/bin/env bash

AMVERSION="6.7"

# Determine main repository and branch
AMREPO="https://raw.githubusercontent.com/ivan-hc/AM/main"
AMBRANCH=$(basename "$AMREPO")

# Determine the name of this script and its working directory
DIR="$( cd "$( dirname "$0" )" && pwd )"
CLI=$(basename "$0")

# Determine system architecture and current user
arch="$HOSTTYPE"
currentuser="$USER"

# Colors
RED='\033[0;31m'; LightBlue='\033[1;34m'; Green='\033[0;32m'

# XDG Variables
DATADIR="${XDG_DATA_HOME:-$HOME/.local/share}"
CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}"
CACHEDIR="${XDG_CACHE_HOME:-$HOME/.cache}"

APPMANCONFIG="$CONFIGDIR/appman"

# Prevent the use of "sudo" ("AM")
function _no_sudo() {
	if [ -n "$SUDO_COMMAND" ]; then
		printf '\n Please do not use "sudo" to execute "'"$CLI"'", try again.\n\n'
		exit 1
	fi
}

_no_sudo


# Export functions to use them also in modules
export -f web_get _make_upper _make_lower

function web_get() {
	wget -q "${@}"
}

function _make_upper() {
	tr '[:lower:]' '[:upper:]'
}

function _make_lower() {
	tr '[:upper:]' '[:lower:]'
}
#

# Determine sytem package manager
function _system_package_manager_check() {
    for cmd in dnf pacman emerge zypper apt-get apk; do
        if command -v $cmd &> /dev/null; then
            osPKGman="$cmd"
            return
        fi
    done
    osPKGman=""
}

# "AM" CORE VARIABLES
function _am() {
	AMCLI="am"
	AMCLIPATH="$AMCLI"
	SUDOCOMMAND="sudo"
	COMPLETIONPATH="/etc/bash_completion.d"
	COMPLETIONFILE="am-completion.sh"
	APPSPATH="/opt"
	AMPATH="$APPSPATH/$AMCLI"
	mkdir -p "$AMPATH"/.cache
	mkdir -p "$AMPATH"/modules
}

# "APPMAN" CORE VARIABLES AND FUNCTIONS
function _patch_bashrc_and_profile() {
	# Fix order in "echo $PATH" in case "$HOME/.local/bin" is placed at the beginning instead of the end
	# Check if the custom PATH is not already in .bashrc, then append it (fix - exclamation mark negates the entire command substitution)
	if test -f "$HOME/.bashrc"; then
		if ! grep -q 'export PATH=$PATH:$HOME/.local/bin' "$HOME/.bashrc"; then
			echo 'export PATH=$(echo $PATH | tr ":" "\n" | grep -v "/.local/bin" | tr "\n" ":" | sed ''s/.$//'')' >> "$HOME/.bashrc"
			echo -e 'export PATH=$PATH:$HOME/.local/bin\n' >> "$HOME/.bashrc"
		fi
	fi
	# Correct the order of .local/bin in .profile if necessary
	if test -f "$HOME/.profile"; then
		if grep -q 'PATH="$HOME/.local/bin:$PATH"' "$HOME/.profile"; then
			sed -i 's#PATH="$HOME/.local/bin:$PATH"#PATH="$PATH:$HOME/.local/bin"#g' "$HOME/.profile"
		fi
	elif test -f "$HOME/.bash_profile"; then
		if grep -q 'PATH="$HOME/.local/bin:$PATH"' "$HOME/.bash_profile"; then
			sed -i 's#PATH="$HOME/.local/bin:$PATH"#PATH="$PATH:$HOME/.local/bin"#g' "$HOME/.bash_profile"
		fi
	fi
}

function _appman_initialize() {
	APPSDIR=$1
	mkdir -p ~/"$APPSDIR"/appman/.cache
	mkdir -p ~/"$APPSDIR"/appman/modules
	mkdir -p ~/.local/bin "$DATADIR"/applications "$DATADIR"/icons
	AMCLI="appman"
	AMCLIPATH="$DIR/$AMCLI"
	SUDOCOMMAND=""
	COMPLETIONPATH="$HOME"
	COMPLETIONFILE=".bash_completion"
	APPSPATH="$HOME/$APPSDIR"
	AMPATH="$HOME/$APPSDIR/$AMCLI"
}

# Helper functions don't need to be defined inside the parent function
function _appman_prompt_for_directory() {
	local location
	read -r -ep "Please, write the name or the path of your custom application's folder: $(echo -e '\n\n '$HOME'/')" location
	echo "$location"
}

function _appman_validate_directory() {
	local location=$1
	if [[ "$location" == "" ]]; then
		echo '--------------------------------------------------------------------------'
		echo 'OPERATION ABORTED!'
		exit  1
	elif [[ "$location" == ".local/bin" ]]; then
		echo -e '--------------------------------------------------------------------------\n'
		echo -e " ðŸ’€ ERROR, you can't install applications into a '$PATH'\n\n The directory ~/.local/bin and 'bin' folders are used for executables.\n\n Please, choose a different path and retry! \n"
		echo -e '--------------------------------------------------------------------------\n'
		exit  1
	else
		local location_appman="${location/#$HOME}"
		location_appman="${location_appman// /-}"
		location_appman="${location_appman#/}"
		location_appman="${location_appman%/}"
		echo "$location_appman"
	fi
}

function _appman() {
	if [[ ! -f "$APPMANCONFIG"/appman-config ]]; then
		local location=""
		local validated_location=""
		echo -e '--------------------------------------------------------------------------\n\
		>>> Thank you for choosing AppMan!\n\
		--------------------------------------------------------------------------\n\
		Before proceeding with any task, write the name of the directory in which\n\
		you will install the apps, for example "Programs" or "My-apps", you can\n\
		also choose a subfolder, for example ".local/My-apps" or a deeper path.\n\
		\nThe destination folder will be created in $HOME\n\
		\nSYNTAX: PATH/TO/DIRNAME\n\
		NOTE, any spaces or "/" at the beginning and end will be removed. If you\n\
		decide to change your choice in the future, first remove all the programs\n\
		and then edit the ~/.config/appman/appman-config text file.\n\
		--------------------------------------------------------------------------\n'
		location=$(_appman_prompt_for_directory)
		validated_location=$(_appman_validate_directory "$location")
		mkdir -p "$APPMANCONFIG"
		echo "$validated_location" >> "$APPMANCONFIG"/appman-config
		echo -e "--------------------------------------------------------------------------\n\
		You are ready! Start installing your favorite apps locally!!\n\
		All apps will be installed in $HOME/$validated_location\n\
		\nIn case of problems, use the option \"-h\".\n\
		--------------------------------------------------------------------------"
	fi
	_appman_initialize "$(<"$APPMANCONFIG"/appman-config)"
	_patch_bashrc_and_profile
}

function _betatester_message_on() {
	if test -f "$AMPATH"/betatester; then
		printf '\n--------------------------------------------------------------------------\n%s %s: developer mode\n--------------------------------------------------------------------------\n' "$AMCLI" "$AMVERSION" | tr '[:lower:]' '[:upper:]'
	fi
}

function _use_betatester_on() {
	touch "$AMPATH"/betatester
}

function _use_betatester_off() {
	rm -f "$AMPATH"/betatester
}

function _jq_installer() {
	if ! command -v jq 1>/dev/null; then
		_system_package_manager_check
		if [[ -z "$osPKGman" ]];then
			echo -e " ${RED}ðŸ’€ ERROR!\033[0m Missing essential command ${Green}jq\033[0m\n"
			read -p " Do you wish to install it using $AMCLI (Y,n)? " yn
			case $yn in
			'N'|'n')
				printf '\n The "jq" command is essential for parsing JSON files on sites\n\
				 for example api.github.com, to list the URLs of apps to download.\n\
				 You need to install it at least via your package manager to use %s.\n\n\
				 Missing essential command ${RED}jq\033[0m, aborted!' "$AMCLI"
				exit
				;;
			'Y'|'y'|*)
				rm -f "$AMPATH"/.cache/*
				echo
				source "$AMPATH"/modules/install.am -i jq 2>&1 | grep 'INSTALLED'
				echo
				;;
			esac
		else
			printf ' %sðŸ’€ ERROR!\033[0m Missing essential command %sjq\033[0m\n Install it from your system package manager %s and retry!' "${RED}" "${Green}" "$osPKGman"
			exit
		fi
	fi
}

# DOWNLOAD PORTABLE DEPENDENCES
function _portable_dependences_setup() {

	function _jq_installer() {
		if ! command -v jq 1>/dev/null; then

			_system_package_manager_check

			if [[ -z "$osPKGman" ]];then
				echo -e " ${RED}ðŸ’€ ERROR!\033[0m Missing essential command ${Green}jq\033[0m\n"
				read -p " Do you wish to install it using $AMCLI (Y,n)? " yn
				case $yn in
				'N'|'n')
					echo -e "\n The \"jq\" command is essential for parsing JSON files on sites"
					echo " for example api.github.com, to list the URLs of apps to download."
					echo -e " You need to install it at least via your package manager to use \"$AMCLI\".\n\n Missing essential command ${RED}jq\033[0m, aborted!"; exit
					;;
				'Y'|'y'|*)
					rm -f "$AMPATH"/.cache/*
					echo ""
					source "$AMPATH"/modules/install.am -i jq 2>&1 | grep "INSTALLED"
					echo ""
					;;
				esac
			else
				echo -e " ${RED}ðŸ’€ ERROR!\033[0m Missing essential command ${Green}jq\033[0m\n"
				echo " Install it from your system package manager and retry!"; exit
			fi
		fi
	}
	_jq_installer
}

function _am_dependences_check() {
	# Check for essential commands required by the application
	missing_deps=()
	AMDEPENDENCES="cat chmod chown curl grep sed wget"
	for name in $AMDEPENDENCES; do
		if ! command -v "$name" &>/dev/null; then
			missing_deps+=("$name")
		fi
	done
	# Exit if any essential command is missing
	if [ -n "$missing_deps" ]; then
		echo '--------------------------------------------------------------------------'
		printf ' ${RED}ðŸ’€ ERROR! MISSING ESSENTIAL COMMANDS\033[0m: %s\n\n Install the above and try again! \n' "${missing_deps[*]}"
		echo '--------------------------------------------------------------------------'
		echo -e "\n ${Green}List of the $(echo "$AMCLI" | _make_upper) $AMVERSION core dependences\033[0m:\n"
		echo $AMDEPENDENCES | tr ' ' ',' | sed 's/,/, /g' | sed 's/^/ /g'
		echo -e '\n--------------------------------------------------------------------------'
		echo ' If this message appears it is because you are missing some dependency'
		echo ' and if its the first time its because something new has been introduced.'
		echo -e "\n See ${LightBlue}https://github.com/ivan-hc/AM#dependences\033[0m for more information"
		echo '--------------------------------------------------------------------------'
		exit 1
	fi
}

# Function to check online connections (uses github.com by default, as the database and CLI itself are stored/hosted there)
function _online_check() {
	if ! web_get --tries=10 --timeout=20 --spider https://github.com; then
		echo -e "\n $AMCLI is offline, please check your internet connection and try again\n"
		exit
	fi
}

# FUNCTIONS RELATED TO THE SAFE USE OF "AM"
function _am_security_check() {
	_am_dependences_check
	# Check and create the $AMPATH directory if it does not exist
	if [ ! -d "$AMPATH" ]; then
		$SUDOCOMMAND mkdir -p "$AMPATH"
	fi
}

# SECURE INSTALLED APPS
function _prevent_apps_from_being_removed_by_third_parties() {
	# Add a security layer to scripts named "remove" of installed apps to prevent file removal by non-privileged users
	if [ $AMCLI == am ] 2>/dev/null; then
		if ! grep -q '"$SUDO_COMMAND"' /opt/*/remove 2> /dev/null; then
			for r in /opt/*/; do
				if test -f $r/remove; then
					sed -i '1 a if [ -z "$SUDO_COMMAND" ]; then echo "Permission denied"; exit 1; fi' $r/remove 2> /dev/null
				fi
			done
		fi
	fi
}

function _am_newrepo_check() {
	# Determine if the CLI uses the "main" branch of https://github.com/ivan-hc/AM or an alternative one
	if [[ -f "$AMPATH"/new-repo.txt ]]; then
		AMREPO=$(<"$AMPATH/new-repo.txt") # Utilizing command substitution with < for more efficient file reading
		AMBRANCH=$(basename "$AMREPO")
		APPSDB="$AMREPO/programs/$arch"
		APPSLISTDB="$AMREPO/programs/$arch-apps"
		LIBSLISTDB="$AMREPO/programs/libs-list"
		if [[ "$@" != "newrepo off" ]]; then
			echo '--------------------------------------------------------------------------'
			echo " Source: $AMREPO"
			echo '--------------------------------------------------------------------------'
		fi
	else
		APPSDB="$AMREPO/programs/$arch"
		APPSLISTDB="$AMREPO/programs/$arch-apps"
		LIBSLISTDB="$AMREPO/programs/libs-list"
	fi
}

# FUNCTIONS RELATED TO THE DATABASE OF APPS
function _am_databases_check() {
	# Determine catalogue in use
	export AMCATALOGUEMARKDOWNS="https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps"
	export AMCATALOGUEICONS="https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/icons"
	_am_newrepo_check
	# To implement future application database changes
	if [ -f "$AMPATH/neodb" ]; then
		if grep -q "://" "$AMPATH/neodb"; then
			if grep -q "#STATUS=quiet" "$AMPATH/neodb"; then
				case "$1" in
					'-a'|'about'|'-d'|'download'|'-i'|'install'|'-l'|'list'|'-q'|'query')
						echo '--------------------------------------------------------------------------'
						echo " Source: Third party repositories are enabled"
						echo '--------------------------------------------------------------------------'
						;;
				esac
			fi
		fi
	fi
}

# Check version of the installed apps
function _check_version() {
	rm -f $AMPATH/.cache/version-args
	cd $APPSPATH &&
	INSTALLED_APPS=$(find -name 'remove' -printf "%h\n" 2>/dev/null | du -sh -- * 2> /dev/null | sort -rh | sed 's@.*	@@')
	for arg in $INSTALLED_APPS; do
		 if test -f ./$arg/remove 2>/dev/null; then
	 		if test -f ./$arg/version 2>/dev/null; then
				APPVERSION=$(cat $APPSPATH/$arg/version | head -1 | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
				if [ -z "$APPVERSION" ]; then
					if test -f ./$arg/*.zsync 2>/dev/null; then
						APPVERSION=$(strings -d ./$arg/*.zsync | grep -i $arg | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
					elif grep -q -- "-$arch/" ./$arg/version; then
						ALPHANUMERICTEST=$(cat $APPSPATH/$arg/version | tr '-' '\n' | grep -vi "appimage\|$arg\|$arch" | tail -1)
						if ! [[ "$ALPHANUMERICTEST" =~ [^a-zA-Z0-9] ]]; then
							APPVERSION="$ALPHANUMERICTEST"
						fi
					elif ! sed "s/$arch//g" $APPSPATH/$arg/version | grep -q "[0-9]"; then
						if grep -qi "/continuous/" $APPSPATH/$arg/version 2>/dev/null; then
							APPVERSION="continuous"
						fi
					else
						APPVERSION=$(cat $APPSPATH/$arg/version | sed 's:.*/::' | tr '-' '\n' | tr '_' '\n' | grep -vi "appimage\|$arg\|$arch\|amd64" | grep "[0-9]" | head -1)
					fi
				fi
			elif test -f ./$arg/updater 2>/dev/null; then
				APPVERSION=$($APPSPATH/$arg/updater -d $APPSPATH/$arg/$arg 2>/dev/null | grep -i $arg | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
				if [ -z "$APPVERSION" ]; then
					APPVERSION=$(grep -i "version=" $APPSPATH/$arg/* 2>/dev/null | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
				fi
			elif [ "$arg" == "$AMCLI" ]; then
				APPVERSION="$AMVERSION"
			elif grep -qi "version=" ./$arg/* 2>/dev/null; then
				APPVERSION=$(grep -i "version=" $APPSPATH/$arg/* 2>/dev/null | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
			elif echo "$arg" | grep -q "ffwa-"; then
				APPVERSION="WebApp"
			elif cat $APPSPATH/$arg/remove 2> /dev/null | grep -q "usr/local/lib"; then
				APPVERSION=$(strings -d $(cat $APPSPATH/$arg/remove | tr ' ' '\n' | grep "usr/local/lib") | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | tail -1)
			else
				APPVERSION="unknown"
			fi
			if [ -z "$APPVERSION" ]; then
				APPVERSION="unknown"
			fi
			echo " â—† $arg	|	$APPVERSION" >> $AMPATH/.cache/version-args
		fi
	done
}

# Functions related to internal options to enable/disable bash (and zsh) completion.
function _use_disable-completion() {
	if [ "$(grep -o "$AMCLI" 0<"$COMPLETIONPATH/$COMPLETIONFILE" | head -1)" == "$AMCLI" ]; then
		grep -v 'complete -W "$(cat '"$AMPATH"'/list 2>/dev/null)" '"$AMCLI"'' "$COMPLETIONPATH/$COMPLETIONFILE" > "$AMPATH"/$COMPLETIONFILE.backup &&
		$SUDOCOMMAND mv "$AMPATH"/$COMPLETIONFILE.backup "$COMPLETIONPATH/$COMPLETIONFILE"
		echo ' Completion disabled! '
	else
		echo ' Completion script is NOT enabled! '
	fi
}

function _use_enable_completion() {
	if [ "$(grep -o "$AMCLI" 0<"$COMPLETIONPATH/$COMPLETIONFILE" | head -1)" == "$AMCLI" ]; then
		echo ' Completion script is already enabled!'
	else
		$SUDOCOMMAND mkdir -p "$COMPLETIONPATH"
		if [ "$AMCLI" == appman ]; then
			if ! test -f "$COMPLETIONPATH/$COMPLETIONFILE"; then
				echo '#!/usr/bin/env bash' >> "$COMPLETIONFILE"
			fi
		else
			echo '#!/usr/bin/env bash' >> "$COMPLETIONFILE"
		fi
		printf 'complete -W %s %s' "$(cat '"$AMPATH"'/list 2>/dev/null)" "$AMCLI" >> "$COMPLETIONFILE"
		chmod a+x "$COMPLETIONFILE"
		$SUDOCOMMAND mv "$COMPLETIONFILE" "$COMPLETIONPATH/" 2> /dev/null
		echo ' Completion has been enabled!'
	fi
	if [ -f "$HOME/.zshrc" ] || [ -f "$ZDOTDIR/.zshrc" ]; then
		if [ -n "$ZDOTDIR" ]; then
			ZSHDIR="$ZDOTDIR"
		else
			ZSHDIR="$HOME"
		fi
		if grep -q "source $ZSHDIR/$COMPLETIONFILE" "$ZSHDIR/.zshrc"; then
			echo 'Zsh completion already enabled!'
		else
			echo '#!/usr/bin/env bash' >> "$ZSHDIR/$COMPLETIONFILE"
			pritf 'complete -W %s %s' "$(cat '"$AMPATH"'/list 2>/dev/null)" "$AMCLI" >> "$ZSHDIR/$COMPLETIONFILE"
			chmod a+x "$ZSHDIR/$COMPLETIONFILE"
			echo -e "\nautoload bashcompinit\nbashcompinit\nsource $ZSHDIR/$COMPLETIONFILE" >> "$ZSHDIR/.zshrc"
		fi
	fi
}

# Function for the option that helps "AM" function like "AppMan", via alias
function _use_appman() {
	_online_check
	if [ "$AMCLI" == appman ] 2>/dev/null; then
		echo ' This function only works for AM'
		exit
	fi
	if test -f /opt/am/appman; then
		_appman
		echo -e "Please run '${RED}alias am=/opt/am/appman\033[0m' to made 'AM' act exactly like 'AppMan' for\nthe current session or save this command to your \"~/.bashrc\" file to make the\nchanges permanent. Visit ${LightBlue}https://github.com/ivan-hc/appman\033[0m for more!"
	else
		_appman
		web_get "$AMREPO"/APP-MANAGER -O /opt/am/appman && chmod a+x /opt/am/appman
		echo -e "Please run '${RED}alias am=/opt/am/appman\033[0m' to made 'AM' act exactly like 'AppMan' for\nthe current session or save this command to your \"~/.bashrc\" file to make the\nchanges permanent."
	fi
}

# Handle external modules
function _use_module() {
	# Test if module exists
	if ! test -f "$AMPATH/modules/$MODULE"; then
		web_get "$AMREPO/modules/$MODULE" -O "$AMPATH/modules/$MODULE"
		chmod a+x "$AMPATH/modules/$MODULE"
	fi
	# Source module
	source "$AMPATH/modules/$MODULE" "$@"
}

# Common variables to handle user's XDG directories
export SCRIPTDIR="$(if command -v xdg-user-dir &>/dev/null; then xdg-user-dir DESKTOP; else echo $HOME; fi)"

# DETERMINE WHEN TO USE "AM" OR "APPMAN"
if [[ "$DIR/$CLI" == "/usr/local/bin/am" ]] 2>/dev/null; then
	_am
else
	_appman
fi

# Set header authorization if GitHub API key file exists
[ -f "$AMPATH/ghapikey.txt" ] && HeaderAuthWithGITPAT=" --header \"Authorization: token $(<"$AMPATH/ghapikey.txt")\" "

# DEVELOPER MODE
if test -f "$AMPATH"/betatester; then
	AMREPO="https://raw.githubusercontent.com/ivan-hc/AM/dev"
	AMBRANCH=$(basename "$AMREPO")
fi

_am_security_check
_prevent_apps_from_being_removed_by_third_parties 2> /dev/null
_am_databases_check

# Generate a list of words to use in bash completion
rm -rf "$AMPATH/options"
cat <<-HEREDOC >> "$AMPATH/options"
	about
	apikey
	backup
	clean
	download
	files
	install
	list
	lock
	neodb
	newrepo
	nolibfuse
	overwrite
	query
	remove
	sync
	template
	test
	unlock
	update
	web
	--apps
	--byname
	--convert
	--debug
	--devmode-disable
	--devmode-enable
	--disable-completion
	--enable-completion
	--firejail
	--force-latest
	--home
	--launcher
	--less
	--rollback
	--sandbox
	--silent
	--user
HEREDOC

# ALL THE OPTIONS
case "$1" in
	'')
		echo -e "\n USAGE: '$AMCLI [option]'\n        '$AMCLI [option] [argument]'\n\n Run the '$AMCLI -h' command to find out more\n"
		;;
	# OPTIONS BASED ON EXTERNAL MODULES
	'-a'|'about'|'-l'|'list'|'-q'|'query')
		MODULE="database.am"
		_use_module "$@"
		;;
	'-b'|'backup'|'-o'|'overwrite'|'lock'|'unlock')
		MODULE="no-updates.am"
		_use_module "$@"
		;;
	'-c'|'clean')
		MODULE="clean.am"
		_use_module
		;;
	'-d'|'download')
		MODULE="download.am"
		_online_check
		_use_module "$@"
		;;
	'-f'|'files')
		MODULE="files.am"
		_use_module "$@"
		_betatester_message_on
		;;
	'-h'|'help')
		MODULE="help.am"
		_use_module "$@"
		;;
	'-H'|'--home'|'--firejail'|'--sandbox')
		MODULE="sandboxes.am"
		_use_module "$@"
		;;
	'-i'|'install')
		MODULE="install.am"
		_online_check
		_betatester_message_on
		_portable_dependences_setup
		_use_module "$@"
		;;
	'-R'|'-r'|'remove')
		MODULE="remove.am"
		_use_module "$@"
		;;
	'-s'|'sync')
		MODULE="sync.am"
		_online_check
		_betatester_message_on
		_use_module "$@"
		;;
	'-t'|'template')
		MODULE="template.am"
		_online_check
		_use_module "$@"
		;;
	'-u'|'-U'|'update'|'--force-latest')
		MODULE="update.am"
		_online_check
		_portable_dependences_setup
		_use_module "$@"
		;;
	'--launcher')
		MODULE="launcher.am"
		_use_module "$@"
		;;
	'--rollback')
		MODULE="rollback.am"
		_online_check
		_use_module "$@"
		;;
	'neodb'|'apikey'|'newrepo')
		MODULE="devtools.am"
		_online_check
		_use_module "$@"
		;;
	'nolibfuse')
		MODULE="nolibfuse.am"
		_online_check
		_use_module "$@"
		;;
	# INBUILT OPTIONS
	'--devmode-disable')
		_use_betatester_off
		;;
	'--devmode-enable')
		_use_betatester_on
		_betatester_message_on
		;;
	'--disable-completion')
		_use_disable-completion
		;;
	'--enable-completion')
		_use_enable_completion
		;;
	'--user'|'appman')
		_use_appman
		;;
	'version'|'-v'|'--version')
		echo "$AMVERSION"
		;;
	*)
		exec "$AMCLIPATH"
		;;
esac

# vim:tabstop=4:shiftwidth=4:expandtab
