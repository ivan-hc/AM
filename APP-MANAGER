#!/usr/bin/env bash

AMVERSION="6.6.2-2"

# Determine the name of this script and its working directory
DIR="$( cd "$( dirname "$0" )" && pwd )"
CLI=$(basename "$0")

# Determine system architecture and current user
arch="$HOSTTYPE"
currentuser="$USER"

# Prevent the use of "sudo" ("AM")
function _no_sudo() {
	if [ -n "$SUDO_COMMAND" ]; then
		printf '\n Please do not use "sudo" to execute "'"$CLI"'", try again.\n\n';
		exit 1;
	fi
}

# "AM" CORE VARIABLES
function _am() {
	AMCLI="am"
	AMCLIPATH="$AMCLI"
	SUDOCOMMAND="sudo"
	COMPLETIONPATH="/etc/bash_completion.d"
	COMPLETIONFILE="am-completion.sh"
	APPSPATH="/opt"
	AMPATH="$APPSPATH/$AMCLI"
	mkdir -p "$AMPATH"/.cache
	mkdir -p "$AMPATH"/modules
}

# Function taken from inside of _appman function (can be defined anywhere, before needs to be runned)
function _appman_initialize() {
	APPSDIR=$1
	mkdir -p ~/"$APPSDIR"/appman/.cache
	mkdir -p ~/"$APPSDIR"/appman/modules
	mkdir -p ~/.local/bin "$DATADIR"/applications "$DATADIR"/icons
	AMCLI="appman"
	AMCLIPATH="$DIR/$AMCLI"
	SUDOCOMMAND=""
	COMPLETIONPATH="$HOME"
	COMPLETIONFILE=".bash_completion"
	APPSPATH="$HOME/$APPSDIR"
	AMPATH="$HOME/$APPSDIR/$AMCLI"
}

# Function doesn't run where is written, but where is called!

# Helper functions don't need to be defined inside the parent function
function _appman_prompt_for_directory() {
	local location
	read -r -ep "Please, write the name or the path of your custom application's folder: $(echo -e '\n\n '$HOME'/')" location
	echo "$location"
}

# we are doing this because script will be more readable. We separate "working" part of script, from script logic itself

function _appman_validate_directory() {
	local location=$1
	if [[ "$location" == "" ]]; then
		echo -e "--------------------------------------------------------------------------"
		echo "OPERATION ABORTED!"
		exit  1
	elif [[ "$location" == ".local/bin" ]]; then
		echo -e "--------------------------------------------------------------------------\n"
		echo -e " ðŸ’€ ERROR, you can't install applications into a '$PATH'\n\n The directory ~/.local/bin and 'bin' folders are used for executables.\n\n Please, choose a different path and retry! \n"
		echo -e "--------------------------------------------------------------------------\n"
		exit  1
	else
		local location_appman="${location/#$HOME}"
		location_appman="${location_appman// /-}"
		location_appman="${location_appman#/}"
		location_appman="${location_appman%/}"
		echo "$location_appman"
	fi
}

# You can test this PR in after any change and will work still the same. nothing has really changed except script internall visuall look

# Fix order in "echo $PATH" in case "$HOME/.local/bin" is placed at the beginning instead of the end
function _patch_bashrc_and_profile() {
	# Check if the custom PATH is not already in .bashrc, then append it (fix - exclamation mark negates the entire command substitution)
	if test -f "$HOME/.bashrc"; then
		if ! grep -q 'export PATH=$PATH:$HOME/.local/bin' "$HOME/.bashrc"; then
			echo 'export PATH=$(echo $PATH | tr ":" "\n" | grep -v "/.local/bin" | tr "\n" ":" | sed ''s/.$//'')' >> "$HOME/.bashrc"
			echo -e 'export PATH=$PATH:$HOME/.local/bin\n' >> "$HOME/.bashrc"
		fi
	fi
	# Correct the order of .local/bin in .profile if necessary
	if test -f "$HOME/.profile"; then
		if grep -q 'PATH="$HOME/.local/bin:$PATH"' "$HOME/.profile"; then
			sed -i 's#PATH="$HOME/.local/bin:$PATH"#PATH="$PATH:$HOME/.local/bin"#g' "$HOME/.profile"
		fi
	elif test -f "$HOME/.bash_profile"; then
		if grep -q 'PATH="$HOME/.local/bin:$PATH"' "$HOME/.bash_profile"; then
			sed -i 's#PATH="$HOME/.local/bin:$PATH"#PATH="$PATH:$HOME/.local/bin"#g' "$HOME/.bash_profile"
		fi
	fi
}

# New function taken from _appman rename it like you want (tried to guess best name), but you already know best name for this function...
function _appman_message_before_installation() {
	if [[ ! -f "$APPMANCONFIG"/appman-config ]]; then
		echo "--------------------------------------------------------------------------"
		echo " >>> Thank you for choosing AppMan!"
		echo "--------------------------------------------------------------------------"
		echo "Before proceeding with any task, write the name of the directory in which"
		echo 'you will install the apps, for example "Programs" or "My-apps", you can '
		echo 'also choose a subfolder, for example ".local/My-apps" or a deeper path.'
		echo -e "\nThe destination folder will be created in $HOME"
		echo -e "\nSYNTAX: PATH/TO/DIRNAME\n"
		echo 'NOTE, any spaces or "/" at the beginning and end will be removed. If you '
		echo 'decide to change your choice in the future, first remove all the programs'
		echo 'and then edit the ~/.config/appman/appman-config text file.'
		echo -e "--------------------------------------------------------------------------\n"
		local location=$(_appman_prompt_for_directory)
		local validated_location=$(_appman_validate_directory "$location")
		mkdir -p "$APPMANCONFIG"
		echo "$validated_location" >> "$APPMANCONFIG"/appman-config
		echo '--------------------------------------------------------------------------'
		echo 'You are ready! Start installing your favorite apps locally!!'
		echo "All apps will be installed in $HOME/$validated_location"
		echo -e '\nIn case of problems, use the option "-h".'
		echo '--------------------------------------------------------------------------'
	fi
}






























_no_sudo

# Common variables to handle user's XDG directories
export SCRIPTDIR="$(if command -v xdg-user-dir &>/dev/null; then xdg-user-dir DESKTOP; else echo $HOME; fi)"

# Check XDG variables ("APPMAN")
if [ -n "$XDG_CONFIG_HOME" ]; then
	APPMANCONFIG="$XDG_CONFIG_HOME/appman"
else
	APPMANCONFIG="$HOME/.config/appman"
fi

if [ -n "$XDG_DATA_HOME" ]; then
	DATADIR="$XDG_DATA_HOME"
else
	DATADIR="$HOME/.local/share"
fi

# "APPMAN" CORE VARIABLES AND FUNCTIONS
function _appman() {

# we added run script for new function here. we function to be runned here
	_appman_message_before_installation
	_appman_initialize "$(<"$APPMANCONFIG"/appman-config)"


	_patch_bashrc_and_profile
}

# DETERMINE WHEN TO USE "AM" OR "APPMAN"
if [[ "$DIR/$CLI" == "/usr/local/bin/am" ]] 2>/dev/null; then
	_am
else
	_appman
fi

# FUNCTIONS RELATED TO THE SAFE USE OF "AM"
function _am_security_check() {
	function _am_dependences_check() {
		# Check for essential commands required by the application
		missing_deps=()
		for name in cat chmod chown curl grep sed wget; do
			if ! command -v "$name" &>/dev/null; then
				printf "\nERROR: command \"%s\" not found, strongly needed by \"%s\"!\n" "$name" "$AMCLI"
			missing_deps+=("$name")
			fi
		done

		# Exit if any essential command is missing
		if [ -n "$missing_deps" ]; then
			printf "\nMissing essential commands: %s\nInstall the above and try again\n\n" "${missing_deps[*]}"
			exit 1
		fi
	}

	_am_dependences_check

	# Check and create the $AMPATH directory if it does not exist
	if [ ! -d "$AMPATH" ]; then
		$SUDOCOMMAND mkdir -p "$AMPATH"
	fi

	# Prevent other system users from using "AM"
	if [ "$AMCLI" == am ]; then
		ampathowner=$(ls -ld /opt/am | awk 'NR==1 {print $3}')
		if [ "$ampathowner" != "$currentuser" ]; then
			echo ' ðŸ’€ ERROR: you are not the owner of /opt/am, so you cannot use "AM"'
			echo '--------------------------------------------------------------------------'
			echo ' The user that have installed "AM" on this system is "'"$ampathowner"'"'
			echo ' you are only allowed to use the installed apps, not to manage them.'
			echo '--------------------------------------------------------------------------'
			echo ' Please, contact "'"$ampathowner"'" to change the ownership of /opt/am or'
			echo ' consider using "AppMan" instead, see https://github.com/ivan-hc/AppMan'
			echo '--------------------------------------------------------------------------'
			exit
		fi
	fi

	# Function to check online connections (uses github.com by default, as the database and CLI itself are stored/hosted there)
	function _online_check() {
		if ! wget -q --tries=10 --timeout=20 --spider https://github.com; then
			echo -e "\n $AMCLI is offline, please check your internet connection and try again\n"
			exit
		fi
	}
}

_am_security_check

# FUNCTIONS RELATED TO THE DATABASE OF APPS
function _am_databases_check() {
	# Determine catalogue in use
	export AMCATALOGUEMARKDOWNS="https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps"
	export AMCATALOGUEICONS="https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/icons"

	function _am_newrepo_check() {
		# Determine if the CLI uses the "main" branch of https://github.com/ivan-hc/AM or an alternative one
		if [[ -f "$AMPATH"/new-repo.txt ]]; then
			AMREPO=$(<"$AMPATH/new-repo.txt") # Utilizing command substitution with < for more efficient file reading
			APPSDB="$AMREPO/programs/$arch"
			APPSLISTDB="$AMREPO/programs/$arch-apps"
			LIBSLISTDB="$AMREPO/programs/libs-list"
			if [[ "$@" != "newrepo off" ]]; then
				echo '--------------------------------------------------------------------------'
				echo " Source: $AMREPO"
				echo '--------------------------------------------------------------------------'
			fi
		else
			AMREPO="https://raw.githubusercontent.com/IVAN-HC/AM/main" # Consolidating variable assignments for clarity and brevity
			APPSDB="$AMREPO/programs/$arch"
			APPSLISTDB="$AMREPO/programs/$arch-apps"
			LIBSLISTDB="$AMREPO/programs/libs-list"
		fi
	}

	_am_newrepo_check

	# To implement future application database changes
	if [ -f "$AMPATH/neodb" ]; then
		if grep -q "://" "$AMPATH/neodb"; then
			if grep -q "#STATUS=quiet" "$AMPATH/neodb"; then
				case "$1" in
				'-a'|'about'|'-d'|'download'|'-i'|'install'|'-l'|'list'|'-q'|'query')
					echo '--------------------------------------------------------------------------'
					echo " Source: Third party repositories are enabled"
					echo '--------------------------------------------------------------------------'
					;;
				esac
			fi
		fi
	fi
}

_am_databases_check

# Set header authorization if GitHub API key file exists
[ -f "$AMPATH/ghapikey.txt" ] && HeaderAuthWithGITPAT=" --header \"Authorization: token $(<"$AMPATH/ghapikey.txt")\" "

# Check version of the installed apps
function _check_version() {
	rm -f $AMPATH/.cache/version-args
	cd $APPSPATH &&
	INSTALLED_APPS=$(find -name 'remove' -printf "%h\n" 2>/dev/null | du -sh -- * 2> /dev/null | sort -rh | sed 's@.*	@@')
	for arg in $INSTALLED_APPS; do
		 if test -f ./$arg/remove 2>/dev/null; then
	 		if test -f ./$arg/version 2>/dev/null; then
				APPVERSION=$(cat $APPSPATH/$arg/version | head -1 | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
				if [ -z "$APPVERSION" ]; then
					if test -f ./$arg/*.zsync 2>/dev/null; then
						APPVERSION=$(strings -d ./$arg/*.zsync | grep -i $arg | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
					elif grep -q -- "-$arch/" ./$arg/version; then
						ALPHANUMERICTEST=$(cat $APPSPATH/$arg/version | tr '-' '\n' | grep -vi "appimage\|$arg\|$arch" | tail -1)
						if ! [[ "$ALPHANUMERICTEST" =~ [^a-zA-Z0-9] ]]; then
							APPVERSION="$ALPHANUMERICTEST"
						fi
					elif ! sed "s/$arch//g" $APPSPATH/$arg/version | grep -q "[0-9]"; then
						if grep -qi "/continuous/" $APPSPATH/$arg/version 2>/dev/null; then
							APPVERSION="continuous"
						fi
					else
						APPVERSION=$(cat $APPSPATH/$arg/version | sed 's:.*/::' | tr '-' '\n' | grep -vi "appimage\|$arg\|$arch" | grep "[0-9]" | head -1)
					fi
				fi
			elif test -f ./$arg/updater 2>/dev/null; then
				APPVERSION=$($APPSPATH/$arg/updater -d $APPSPATH/$arg/$arg 2>/dev/null | grep -i $arg | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
				if [ -z "$APPVERSION" ]; then
					APPVERSION=$(grep -i "version=" $APPSPATH/$arg/* 2>/dev/null | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
				fi
			elif [ "$arg" == "$AMCLI" ]; then
				APPVERSION=$($AMCLIPATH -v)
			elif grep -qi "version=" ./$arg/* 2>/dev/null; then
				APPVERSION=$(grep -i "version=" $APPSPATH/$arg/* 2>/dev/null | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1)
			elif echo "$arg" | grep -q "ffwa-"; then
				APPVERSION="WebApp"
			elif cat $APPSPATH/$arg/remove 2> /dev/null | grep -q "usr/local/lib"; then
				APPVERSION=$(strings -d $(cat $APPSPATH/$arg/remove | tr ' ' '\n' | grep "usr/local/lib") | grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | tail -1)
			else
				APPVERSION="unknown"
			fi
			if [ -z "$APPVERSION" ]; then
				APPVERSION="unknown"
			fi
			echo " â—† $arg	|	$APPVERSION" >> $AMPATH/.cache/version-args
		fi
	done
}

# Generate a list of words to use in bash completion
rm -rf "$AMPATH/options"
cat <<-HEREDOC >> "$AMPATH/options"
	about
	apikey
	backup
	clean
	download
	files
	install
	list
	lock
	neodb
	newrepo
	nolibfuse
	overwrite
	query
	remove
	sync
	template
	test
	unlock
	update
	web
	--apps
	--byname
	--convert
	--debug
	--disable-completion
	--enable-completion
	--firejail
	--force-latest
	--home
	--launcher
	--less
	--rollback
	--sandbox
	--silent
	--user
HEREDOC

# Functions related to internal options to enable/disable bash (and zsh) completion.
function _use_disable-completion() {
	if [ "$(grep -o "$AMCLI" 0<"$COMPLETIONPATH/$COMPLETIONFILE" | head -1)" == "$AMCLI" ]; then
		grep -v 'complete -W "$(cat '"$AMPATH"'/list 2>/dev/null)" '"$AMCLI"'' "$COMPLETIONPATH/$COMPLETIONFILE" > "$AMPATH"/$COMPLETIONFILE.backup &&
		$SUDOCOMMAND mv "$AMPATH"/$COMPLETIONFILE.backup "$COMPLETIONPATH/$COMPLETIONFILE"
		echo " Completion disabled! "
	else
		echo " Completion script is NOT enabled! "
	fi
}

function _use_enable_completion() {
	if [ "$(grep -o "$AMCLI" 0<"$COMPLETIONPATH/$COMPLETIONFILE" | head -1)" == "$AMCLI" ]; then
		echo " Completion script is already enabled!"
	else
		$SUDOCOMMAND mkdir -p "$COMPLETIONPATH"
		if [ "$AMCLI" == appman ]; then
			if ! test -f "$COMPLETIONPATH/$COMPLETIONFILE"; then
				echo '#!/usr/bin/env bash' >> "$COMPLETIONFILE"
			fi
		else
			echo '#!/usr/bin/env bash' >> "$COMPLETIONFILE"
		fi
		echo 'complete -W "$(cat '"$AMPATH"'/list 2>/dev/null)" '"$AMCLI"'' >> "$COMPLETIONFILE"
		chmod a+x "$COMPLETIONFILE"
		$SUDOCOMMAND mv "$COMPLETIONFILE" "$COMPLETIONPATH/" 2> /dev/null
		echo " Completion has been enabled!"
	fi
	if [ -f "$HOME/.zshrc" ] || [ -f "$ZDOTDIR/.zshrc" ]; then
		if [ -n "$ZDOTDIR" ]; then
			ZSHDIR="$ZDOTDIR"
		else
			ZSHDIR="$HOME"
		fi
		if grep -q "source $ZSHDIR/$COMPLETIONFILE" "$ZSHDIR/.zshrc"; then
			echo "Zsh completion already enabled!"
		else
			echo '#!/usr/bin/env bash' >> "$ZSHDIR/$COMPLETIONFILE"
			echo 'complete -W "$(cat '"$AMPATH"'/list 2>/dev/null)" '"$AMCLI"'' >> "$ZSHDIR/$COMPLETIONFILE"
			chmod a+x "$ZSHDIR/$COMPLETIONFILE"
			echo -e "\nautoload bashcompinit\nbashcompinit\nsource $ZSHDIR/$COMPLETIONFILE" >> "$ZSHDIR/.zshrc"
		fi
	fi
}

# Function for the option that helps "AM" function like "AppMan", via alias
function _use_appman() {
	_online_check
	if [ "$AMCLI" == appman ] 2>/dev/null; then
		echo " This function only works for AM"
		exit
	fi
	RED='\033[0;31m'; LightBlue='\033[1;34m'
	if test -f /opt/am/appman; then
		_appman
		echo -e "Please run '${RED}alias am=/opt/am/appman\033[0m' to made 'AM' act exactly like 'AppMan' for\nthe current session or save this command to your '"'~/.bashrc'"' file to make the\nchanges permanent. Visit ${LightBlue}https://github.com/ivan-hc/appman\033[0m for more!"
	else
		_appman
		wget -q "$AMREPO"/APP-MANAGER -O /opt/am/appman && chmod a+x /opt/am/appman
		echo -e "Please run '${RED}alias am=/opt/am/appman\033[0m' to made 'AM' act exactly like 'AppMan' for\nthe current session or save this command to your '"'~/.bashrc'"' file to make the\nchanges permanent."
	fi
}

# Handle external modules
function _use_module() {
	# Test if module exists
	if ! test -f "$AMPATH/modules/$MODULE"; then
		wget -q "$AMREPO/modules/$MODULE" -O "$AMPATH/modules/$MODULE"
		chmod a+x "$AMPATH/modules/$MODULE"
	fi
	# Source module
	source "$AMPATH/modules/$MODULE" "$@"
}

# ALL THE OPTIONS
case "$1" in
	'')
		echo -e "\n USAGE: '$AMCLI [option]'\n        '$AMCLI [option] [argument]'\n\n Run the '$AMCLI -h' command to find out more\n"
		;;
	# OPTIONS BASED ON EXTERNAL MODULES
	'-a'|'about'|'-l'|'list'|'-q'|'query')
		MODULE="database.am"
		_use_module "$@"
		;;
	'-b'|'backup'|'-o'|'overwrite'|'lock'|'unlock')
		MODULE="no-updates.am"
		_use_module "$@"
		;;
	'-c'|'clean')
		MODULE="clean.am"
		_use_module
		;;
	'-d'|'download')
		MODULE="download.am"
		_online_check
		_use_module "$@"
		;;
	'-f'|'files')
		MODULE="files.am"
		_use_module "$@"
		;;
	'-h'|'help')
		MODULE="help.am"
		_use_module "$@"
		;;
	'-H'|'--home'|'--firejail'|'--sandbox')
		MODULE="sandboxes.am"
		_use_module "$@"
		;;
	'-i'|'install')
		MODULE="install.am"
		_online_check
		_use_module "$@"
		;;
	'-R'|'-r'|'remove')
		MODULE="remove.am"
		_use_module "$@"
		;;
	'-s'|'sync')
		MODULE="sync.am"
		_online_check
		_use_module "$@"
		;;
	'-t'|'template')
		MODULE="template.am"
		_online_check
		_use_module "$@"
		;;
	'-u'|'-U'|'update'|'--force-latest')
		MODULE="update.am"
		_online_check
		_use_module "$@"
		;;
	'--launcher')
		MODULE="launcher.am"
		_use_module "$@"
		;;
	'--rollback')
		MODULE="rollback.am"
		_online_check
		_use_module "$@"
		;;
	'neodb'|'apikey'|'newrepo')
		MODULE="devtools.am"
		_online_check
		_use_module "$@"
		;;
	'nolibfuse')
		MODULE="nolibfuse.am"
		_online_check
		_use_module "$@"
		;;
	# INBUILT OPTIONS
	'--disable-completion')
		_use_disable-completion
		;;
	'--enable-completion')
		_use_enable_completion
		;;
	'--user'|'appman')
		_use_appman
		;;
	'version'|'-v'|'--version')
		echo "$AMVERSION"
		;;
	*)
		exec "$AMCLIPATH"
		;;
esac

# vim:tabstop=4:shiftwidth=4:expandtab
