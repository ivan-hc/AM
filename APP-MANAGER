#!/usr/bin/env bash

AMVERSION="8"

# Determine main repository and branch
AMREPO="https://raw.githubusercontent.com/ivan-hc/AM/main"
AMBRANCH=$(basename "$AMREPO")

# Determine catalogue in use
export AMCATALOGUEMARKDOWNS="https://portable-linux-apps.github.io/apps"
export AMCATALOGUEICONS="https://portable-linux-apps.github.io/icons"

# Determine the name of this script and its working directory
export REALDIR="$PWD"
DIR="$( cd "$( dirname "$0" )" && pwd )"
CLI=$(basename "$0")

# Determine system architecture and current user
arch="$HOSTTYPE"
export ARCH="$arch"

# XDG Variables
export BINDIR="${XDG_BIN_HOME:-$HOME/.local/bin}"
export DATADIR="${XDG_DATA_HOME:-$HOME/.local/share}"
export CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}"
export CACHEDIR="${XDG_CACHE_HOME:-$HOME/.cache}"

function _create_cache_dir() {
	AMCACHEDIR="$CACHEDIR/$AMCLI"
	mkdir -p "$AMCACHEDIR"
}

function _clean_amcachedir() {
	[ -z "$AMCACHEDIR" ] && exit 1 || rm -f "$AMCACHEDIR"/*
}

APPMANCONFIG="$CONFIGDIR/appman"
SCRIPTDIR="$(xdg-user-dir DESKTOP 2>/dev/null || echo "$HOME")"
export SCRIPTDIR

# Colors
RED='\033[0;31m'; Gold='\033[0;33m'; Green='\033[0;32m'; LightBlue='\033[1;34m'
DIVIDING_LINE="--------------------\
---------------------------------------------------------"

# Prevent the use of "sudo" ("AM")
[ -n "$SUDO_COMMAND" ] && echo -e "\n Please do not use \"sudo\" to execute \"$CLI\", try again.\n" && exit 1

################################################################################
#				PREPARE APPMAN
################################################################################

# AppMan messages
function _appman_error_local_bin_message() {
	echo -e "$DIVIDING_LINE\n 💀 ERROR, you can't install applications into a \"\$PATH\""
	echo -e " The ~/.local/bin directory is normally used for executables.\n Please, choose a different path and retry! \n$DIVIDING_LINE"
}

function _appman_startup_message() {
	echo -e "$DIVIDING_LINE\n >>> Thank you for choosing AppMan! \n$DIVIDING_LINE"
	echo " Before proceeding with any task, write the name of the directory in which"
	echo " you will install the apps, for example \"Programs\" or \"My-apps\", you can"
	echo " also choose a subfolder, for example \".local/My-apps\" or a deeper path."
	echo -e "\n The destination folder will be created in $HOME\n"
	echo -e " SYNTAX: PATH/TO/DIRNAME\n"
	echo " NOTE, any spaces or \"/\" at the beginning and end will be removed. If you"
	echo " decide to change your choice in the future, first remove all the programs"
	echo -e " and then edit the ~/.config/appman/appman-config text file.\n$DIVIDING_LINE\n"
}

function _appman_ready_message() {
	echo -e "$DIVIDING_LINE\n You are ready! Start installing your favorite apps locally!"
	echo " All apps will be installed in $HOME/$validated_location"
	echo -e "\n In case of problems, use the option \"-h\".\n$DIVIDING_LINE"
}

# AppMan directories checks
function _appman_prompt_for_directory() {
	local location
	read -r -ep " Please, write the name or the path of your custom application's folder: $(echo -e '\n\n '"$HOME"'/')" location
	echo "$location"
}

function _appman_validate_directory() {
	location=$1
	if [ "$location" = "" ]; then
		echo -e "$DIVIDING_LINE\nOPERATION ABORTED!"
		exit  1
	elif [ "$location" = ".local/bin" ]; then
		_appman_error_local_bin_message
		exit  1
	else
		location_appman="${location/#$HOME}"
		location_appman="${location_appman// /-}"
		location_appman="${location_appman#/}"
		location_appman="${location_appman%/}"
		echo "$location_appman"
	fi
}

################################################################################
#				AM/APPMAN
################################################################################

# "APPMAN" CORE VARIABLES AND FUNCTIONS
function _appman_initialize() {
	APPSDIR=$1
	mkdir -p ~/"$APPSDIR"/appman/modules
	mkdir -p "$BINDIR" "$DATADIR"/applications "$DATADIR"/icons
	AMCLI="appman"
	AMCLIPATH="$DIR/$AMCLI"
	SUDOCMD=""
	APPSPATH="$HOME/$APPSDIR"
	AMPATH="$HOME/$APPSDIR/$AMCLI"
	_create_cache_dir
}

function _appman() {
	if [ ! -f "$APPMANCONFIG"/appman-config ]; then
		_appman_startup_message
		location=$(_appman_prompt_for_directory)
		validated_location=$(_appman_validate_directory "$location")
		mkdir -p "$APPMANCONFIG"
		echo "$validated_location" >> "$APPMANCONFIG"/appman-config
		_appman_ready_message
	fi
	_appman_initialize "$(<"$APPMANCONFIG"/appman-config)"
	if ! echo "$PATH" | grep -q "$BINDIR"; then
		echo -e "$DIVIDING_LINE\n ⚠️ WARNING: \"$BINDIR\" is not in PATH, apps may not run.\n$DIVIDING_LINE"
	fi
}

# "AM" CORE VARIABLES
function _am() {
	AMCLI="am"
	AMCLIPATH="$AMCLI"
	if command -v sudo >/dev/null 2>&1; then
		SUDOCMD="sudo"
	elif command -v doas >/dev/null 2>&1; then
		SUDOCMD="doas"
	else
		echo 'ERROR: No sudo or doas found'
		exit 1
	fi
	APPSPATH="/opt"
	AMPATH="$APPSPATH/$AMCLI"
	_create_cache_dir
	mkdir -p "$AMPATH"/modules
}

# DETERMINE WHEN TO USE "AM" OR "APPMAN"
if [ "$(realpath "$0")" = "/opt/am/APP-MANAGER" ]; then
	_am
elif [ "$(realpath "$0")" = "/usr/bin/am" ]; then
	_am
else
	_appman
fi

################################################################################
#				FINALIZE
################################################################################

AMCLIUPPER=$(echo "$AMCLI" | tr '[:lower:]' '[:upper:]')

# Create new data directory and move important files there
AMDATADIR="$DATADIR/AM"
mkdir -p "$AMDATADIR"
[ -f "$AMPATH/betatester" ] && mv "$AMPATH/betatester" "$AMDATADIR/betatester"
[ -f "$AMPATH/list" ] && mv "$AMPATH/list" "$AMDATADIR/list"
[ -f "$AMPATH/$arch-apps" ] && mv "$AMPATH/$arch-apps" "$AMDATADIR/$arch-apps"

# DEVELOPER MODE
if test -f "$AMDATADIR"/betatester; then
	AMREPO="https://raw.githubusercontent.com/ivan-hc/AM/dev"
	AMBRANCH=$(basename "$AMREPO")
fi

function _betatester_message_on() {
	[ -f "$AMDATADIR"/betatester ] && echo -e "$DIVIDING_LINE\n\"$AMCLIUPPER\" $AMVERSION: DEVELOPER MODE\n$DIVIDING_LINE"
}

# Apps database in use
APPSDB="$AMREPO/programs/$arch"
APPSLISTDB="$AMREPO/programs/$arch-apps"

################################################################################
#				SECURITY
################################################################################

# SAFETY CHECKS
function _am_dependences_check() {
	# Check for essential commands required by the application
	missing_deps=()
	AMDEPENDENCES="cat chmod chown curl grep sed wget"
	for name in $AMDEPENDENCES; do
		if ! command -v "$name" &>/dev/null; then
			missing_deps+=("$name")
		fi
	done

	# Exit if any essential command is missing
	if [ -n "$missing_deps" ]; then
		echo "$DIVIDING_LINE"
		printf " ${RED}💀 ERROR! MISSING ESSENTIAL COMMANDS\033[0m: %s\n\n Install the above and try again! \n" "${missing_deps[*]}"
		echo -e "$DIVIDING_LINE\n ${Green}List of the $AMCLIUPPER $AMVERSION core dependences\033[0m:\n"
		echo "$AMDEPENDENCES" | tr ' ' ',' | sed 's/,/, /g' | sed 's/^/ /g'
		echo -e "\n$DIVIDING_LINE"
		echo " If this message appears it is because you are missing some dependency"
		echo " and if its the first time its because something new has been introduced."
		echo -e "\n See ${LightBlue}https://github.com/ivan-hc/AM#core-dependences\033[0m for more information\n$DIVIDING_LINE"
		exit 1
	fi
}

function _am_security_check() {
	_am_dependences_check
	# Check and create the $AMPATH directory if it does not exist
	[ ! -d "$AMPATH" ] && $SUDOCMD mkdir -p "$AMPATH"
}

_am_security_check

# Function to check online connections (uses github.com by default, as the database and CLI itself are stored/hosted there)
function _online_check() {
	if ! wget -q --tries=10 --timeout=20 --spider https://github.com; then
		echo -e "\n $AMCLI is offline, please check your internet connection and try again\n"
		exit
	fi
}

################################################################################
#				3RD PARTY
################################################################################

function _newrepo_list_available() {
	[ ! -f "$AMDATADIR/newrepo-lists" ] && echo " ERROR, \"$AMDATADIR/newrepo-lists\" file not found" && exit 1
}

function _use_newrepo() {
	[ -z "$2" ] && echo " USAGE: $AMCLI $1 [ARGUMENT]" && exit 1
	case $2 in
	'add')
		[ -z "$3" ] && echo -e " USAGE:	$AMCLI $1 $2 /path/to/dir\n	$AMCLI $1 $2 {URL}" && exit 1
		echo "$3" >> "$AMDATADIR/newrepo-lists"
		;;
	'enable'|'on')
		_newrepo_list_available
		[ -f "$AMDATADIR/newrepo-off" ] && mv "$AMDATADIR/newrepo-off" "$AMDATADIR/newrepo-on" && echo " New repo ON!"
		;;
	'disable'|'off')
		_newrepo_list_available
		[ -f "$AMDATADIR/newrepo-on" ] && mv "$AMDATADIR/newrepo-on" "$AMDATADIR/newrepo-off" && echo " New repo OFF!"
		;;
	'info')
		echo -e " Source: $AMREPO\n Apps: $APPSDB\n List: $APPSLISTDB"
		;;
	'purge')
		[ -f "$AMDATADIR/newrepo-lists" ] && rm -f "$AMDATADIR"/newrepo* && echo " Removed all 3rd party repositories"
		;;
	'select')
		_newrepo_list_available
		printf "Select a repo from the list or press CTRL+C to abort:\n$DIVIDING_LINE\n"; sleep 1
		select repo in $(sort -u "$AMDATADIR/newrepo-lists" | uniq); do
			test -n "$repo" && break
			echo ">>> Invalid Selection"
		done
		echo "$repo" > "$AMDATADIR/newrepo-on"
		;;
	esac
}

# 3RD PARTY DATABASES
function _am_newrepo_check() {
	# Determine if the CLI uses the "main" branch of https://github.com/ivan-hc/AM or an alternative one
	if [ -f "$AMDATADIR/newrepo-on" ]; then
		if grep -q "^http" "$AMDATADIR/newrepo-on"; then
			AMREPO=$(<"$AMDATADIR/newrepo-on")
		elif grep -q "^/" "$AMDATADIR/newrepo-on"; then
			AMREPO="file://$(<"$AMDATADIR/newrepo-on")"
		fi
		AMBRANCH=$(basename "$AMREPO")
		export APPSDB="$AMREPO/programs/$arch"
		export APPSLISTDB="$AMREPO/programs/$arch-apps"
		export AMCATALOGUEMARKDOWNS=""
		export AMCATALOGUEICONS=""
		[ "$1" != "newrepo" ] && [ "$1" != "neodb" ] && echo -e "$DIVIDING_LINE\n Source: $AMREPO\n$DIVIDING_LINE"
	fi
}

_am_newrepo_check "$@"

################################################################################
#				UTILITIES
################################################################################

# COMPLETION LIST
available_options="about add apikey backup clean config disable downgrade download enable extra files \
	home info install launcher list lock neodb newrepo nolibfuse off on overwrite purge query \
	remove sandbox select sync template test unlock update --appimages --apps --byname --config \
	--convert --debug --devmode-disable --devmode-enable --force-latest --home --launcher --less \
	--pkg --rollback --disable-sandbox --sandbox --system --user"

function _completion_lists() {
	# Remove existing lists and download new ones
	curl -Ls "$APPSLISTDB" > "$AMDATADIR/$arch-apps"
	awk -v FS="(◆ | : )" '{print $2}' <"$AMDATADIR"/"$arch"-apps > "$AMDATADIR"/list
	# Append options to the list
	for o in $available_options; do
		echo "$o" >> "$AMDATADIR"/list
	done
}

# BASH AND ZSH COMPLETION
completion_file="${ZDOTDIR:-$HOME}"/.bash_completion
if ! grep -qo " $AMCLI$" "$completion_file" >/dev/null 2>&1; then
	echo "complete -W \"\$(cat $AMDATADIR/list 2>/dev/null)\" $AMCLI" >> "$completion_file"
	if [ -f "${ZDOTDIR:-$HOME}"/.zshrc ] && echo "$SHELL" | grep -q "zsh"; then
		cat <<-HEREDOC >> "${ZDOTDIR:-$HOME}"/.zshrc
		autoload bashcompinit
		bashcompinit
		source "$completion_file"
		HEREDOC
	fi
	echo "Shell completion has been enabled!"
fi
sed -i "s#$AMPATH/list#$AMDATADIR/list#g" "$completion_file" 2>/dev/null

# VERSION OF THE INSTALLED APPS
# Filters
function _check_version_filters() {
	sed -E "s/$arch|amd64|x86-64|x64|basic|standard|full|help//g; s/-/\n/g; s/_/\n/g;" |\
	grep -vi "appimage\|$arg\|?\|tar." | grep "[0-9]" | head -1 | sed 's/^v//g; s/^\.//g; s/\.$//g;'
}

function _check_version_grep_numbers() {
	grep -Eo "([0-9]{1,}\.)+[0-9]{1,}" | head -1
}

# Versions
function _check_version_if_any_version_reference_is_somewhere() {
	APPVERSION=$(grep -i "version=" "$APPSPATH"/"$arg"/* 2>/dev/null | _check_version_grep_numbers)
}

function _check_version_if_zsync_file_exists() {
	APPVERSION=$(strings -d ./"$arg"/*.zsync | grep -i "$(echo "$arg" | sed 's/-appimage//g')" | _check_version_grep_numbers)
	[ -z "$APPVERSION" ] && APPVERSION=$(date -r ./"$arg"/*.zsync "+%Y.%m.%d")
}

function _check_version_if_version_file_exists() {
	APPVERSION=$(sort "$APPSPATH"/"$arg"/version | head -1 | sed 's:.*/::' | _check_version_filters)
	if [ -z "$APPVERSION" ]; then
		if grep -q "download$" ./"$arg"/version; then
			APPVERSION=$(sort "$APPSPATH"/"$arg"/version | tr '/' '\n' | _check_version_filters)
		elif grep -q "://" ./"$arg"/version; then
			APPVERSION=$(sort ./"$arg"/version | tr '/' '\n' | _check_version_grep_numbers)
		elif grep -q "/v[0-9]*" ./"$arg"/version; then
			APPVERSION=$(sort "$APPSPATH"/"$arg"/version | tr '/' '\n' | grep "^v[0-9]" | head -1 | sed 's/^v//g')
		elif [ "$(sort ./"$arg"/version | wc -w)" = 1 ]; then
			APPVERSION=$(sort ./"$arg"/version | head -1)
		fi
	fi
	if [ -z "$APPVERSION" ]; then
		if grep -q "http.*download/.*[0-9].*/" ./"$arg"/version; then
			APPVERSION=$(sort ./"$arg"/version | tr '/-' '\n' | grep "[0-9]" | _check_version_filters | tail -1)
		fi
	fi
}

function _check_version_if_an_updater_exists() {
	APPVERSION=$("$APPSPATH"/"$arg"/updater -d "$APPSPATH"/"$arg"/"$arg" 2>/dev/null | grep -i "$arg" |\
	_check_version_grep_numbers)
	[ -z "$APPVERSION" ] && _check_version_if_any_version_reference_is_somewhere
}

function _check_version_if_library() {
	LIBNAME=$(sort "$APPSPATH"/"$arg"/remove | tr ' ' '\n' | grep "usr/local/lib" | head -1 | sed 's:.*/::')
	APPVERSION=$(find /usr/local/lib -type f -name "$LIBNAME" -type f | sed 's:.*.so.::' | tail -1)
}

function _check_version_if_binary_in_place() {
	APPVERSION=$(date -r ./"$arg"/"$arg" "+%Y.%m.%d")
}

function _check_version() {
	rm -f "$AMCACHEDIR"/version-args
	cd "$APPSPATH" &&
	INSTALLED_APPS=$(find . -name 'remove' -printf "%h\n" 2>/dev/null | du -sh -- * 2>/dev/null |\
	sort -rh | sed 's@.*	@@')
	for arg in $INSTALLED_APPS; do
		if test -f ./"$arg"/remove 2>/dev/null; then
			if test -f ./"$arg"/*.zsync 2>/dev/null; then
				_check_version_if_zsync_file_exists
			elif test -f ./"$arg"/version 2>/dev/null; then
				_check_version_if_version_file_exists
			elif test -f ./"$arg"/updater 2>/dev/null; then
				_check_version_if_an_updater_exists
			elif [ "$arg" = "$AMCLI" ]; then
				APPVERSION="$AMVERSION"
			elif grep -qi "version=" ./"$arg"/* 2>/dev/null; then
				_check_version_if_any_version_reference_is_somewhere
			elif echo "$arg" | grep -q "ffwa-"; then
				APPVERSION="WebApp"
			elif grep -q "usr/local/lib" "$APPSPATH"/"$arg"/remove 2>/dev/null; then
				_check_version_if_library
			else
				APPVERSION="unknown"
			fi
			if [ -z "$APPVERSION" ]; then
				[ -f ./"$arg"/"$arg" ] && _check_version_if_binary_in_place || APPVERSION="unknown"
			fi
			echo " ◆ $arg	|	$APPVERSION" >> "$AMCACHEDIR"/version-args
		fi
	done
}

function _check_version_for_auto_updatable_apps() {
	cd "$APPSPATH" &&
	INSTALLED_APPS=$(find . -name 'remove' -printf "%h\n" 2>/dev/null | du -sh -- * 2>/dev/null | sort -rh | sed 's@.*	@@')
	for arg in $INSTALLED_APPS; do
		if test -f ./"$arg"/updater 2>/dev/null; then
			_check_version_if_an_updater_exists
			OLDAPPVERSION=$(grep " ◆ $arg	|" "$AMCACHEDIR"/version-args | tr '|' '\n' | sed 's/	//g' | head -2 | tail -1)
			sed -i "/ ◆ $arg	|/s#$OLDAPPVERSION#$APPVERSION#" "$AMCACHEDIR"/*
		fi
	done
}

if test -f "$AMCACHEDIR"/version-args; then
	_check_version_for_auto_updatable_apps 2>/dev/null
fi

# This function removes all info and versions from the register
function _remove_info_files() {
	rm -f "$AMCACHEDIR"/files*
	rm -f "$AMCACHEDIR"/version-args
}

################################################################################
#				INTERNAL OPTIONS
################################################################################

# APIKEY
ghapikey_file="$AMDATADIR/ghapikey.txt"
[ -f "$AMPATH/ghapikey.txt" ] && mv "$ghapikey_file" "$ghapikey_file"
# Set header authorization if GitHub API key file exists
[ -f "$ghapikey_file" ] && HeaderAuthWithGITPAT=" --header \"Authorization: token $(<"$ghapikey_file")\" "

function _use_apikey() {
	case $2 in
	'del'|'delete'|'remove')
		[ -f "$ghapikey_file" ] || { echo " ✖ No file named $ghapikey_file has been found"; exit 1; }
		rm -f "$ghapikey_file" && echo " ✔ $ghapikey_file has been removed" 
		exit 0
	esac
	if [[ "$2" =~ ^(gh[ps]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})$ ]]; then
		test_apikey_output_with_wget=$(curl -Ls --header "Authorization: token $2" 'https://api.github.com/repos/ivan-hc/AM/releases' | head -1)
		[ -n "$test_apikey_output_with_wget" ] && echo "$2" > "$ghapikey_file" \
			&& echo "Validation successful!" || echo "ERROR: This is not a valid key!"
	else
		echo "ERROR: Wrong expression, validation failed!"
	fi
}

function _update_github_api_key_in_the_updater_files() {
	if [ -f "$ghapikey_file" ]; then
		ghapikey=$(<"$ghapikey_file")
		updater_files=("$APPSPATH"/*/AM-updater) # Assuming AM-updater is one level deeper
		for f in "${updater_files[@]}"; do
			if [ -f "$f" ] && grep -q "https://api.github.com" "$f"; then
				# Check if the file already contains a valid API key
				if ! grep -qE "(gh[ps]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})" "$f"; then
					# Insert HeaderAuthWithGITPAT before the GitHub API URL
					sed -i "s#https://api.github.com#$HeaderAuthWithGITPAT https://api.github.com#g" "$f"
				else
					# Replace existing API key with the one from ghapikey.txt
					sed -i "s#\(gh[ps]_[a-zA-Z0-9]\{36\}\|github_pat_[a-zA-Z0-9]\{22\}_[a-zA-Z0-9]\{59\}\)#$ghapikey#g" "$f"
				fi
			fi
		done
    	fi
}

# "APPMAN MODE" FOR "AM" USERS
APPMAN_MSG="$DIVIDING_LINE\n \"AM\" is running as \"AppMan\", use ${Green}am --system\033[0m to switch it back to \"AM\"\n$DIVIDING_LINE"
APPMAN_MSG_OFF="$DIVIDING_LINE\n \"AppMan Mode\" disabled! \n$DIVIDING_LINE"

function _if_appman_mode_enabled() {
	[ "$CLI" = am ] && [ -f "$APPMANCONFIG"/appman-mode ] && echo -e "$APPMAN_MSG"
}

function _use_appman() {
	_online_check
	[ "$CLI" = appman ] && echo " This function only works for AM" && exit
	[ ! -f "$APPMANCONFIG"/appman-mode ] && mkdir -p "$APPMANCONFIG" && touch "$APPMANCONFIG"/appman-mode
	_appman && echo -e "$APPMAN_MSG"
}

function _use_am_again() {
	[ -f "$APPMANCONFIG"/appman-mode ] && rm -f "$APPMANCONFIG"/appman-mode && echo -e "$APPMAN_MSG_OFF"
}

if [ "$AMCLI" = am ]; then
	if test -f "$APPMANCONFIG"/appman-mode; then
		[ ! -f "$APPMANCONFIG"/appman-config ] && echo -e "$APPMAN_MSG"
		_appman
		AMCLIPATH="/opt/am/APP-MANAGER"
	elif [ ! -w /opt/am ]; then
		read -r -p " \"AM\" is read-only, want to use it in \"AppMan Mode\" (Y,n)? " yn
		if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			exit 0
		else
			echo -e "$DIVIDING_LINE\n \"AppMan Mode\" enabled! \n$DIVIDING_LINE"
			_use_appman 1>/dev/null
		fi
	fi
fi

# BETA TESTER
function _use_beta_tester() {
	if [ "$1" = "--devmode-disable" ]; then
		rm -f "$AMDATADIR"/betatester
	else
		touch "$AMDATADIR"/betatester
		_betatester_message_on
	fi
}

# CLEAN UNNEEDED FILES
function _clean_amcachedir_message() {
	_clean_amcachedir
	echo " ✔ Clear the contents of $AMCACHEDIR"
}

function _clean_all_home_cache_directories_of_appimages() {
	if test -d "$APPSPATH"/*/*.home/.cache 2>/dev/null; then
		rm -Rf "$APPSPATH"/*/*.home/.cache/* &&
		echo " ✔ Clear the contents of all *.home/.cache AppImages directories"
	fi
}

function _clean_all_tmp_directories_from_appspath() {
	if test -d "$APPSPATH"/*/tmp 2>/dev/null; then
		rm -Rf "$APPSPATH"/*/tmp &&
		echo ' ✔ Removed all '"$APPSPATH"'/*/tmp directories'
	fi
}

function _clean_determine_removable_launchers() {
	if ! test -f "$APPIMAGENAME" 2>/dev/null; then
		if ! test -d "$MOUNTPOINTS" 2>/dev/null; then
			if echo "$MOUNTPOINTS" | grep -q "/media/"; then
				unmounted_poin="/media"
			elif echo "$MOUNTPOINTS" | grep -q "/mnt/"; then
				unmounted_poin="/mnt"
			fi
			echo " ✖ ERROR: cannot remove \"$(basename "$var")\""
			echo "   related AppImage is located in an unmounted path of $unmounted_poin"
		else
			rm -f "$var"
			rm -f "$HOME"/.local/bin/"$launcher2del"*
			cd "$HOME"/.local/bin && find . -xtype l -delete
		fi
	fi
}

function _clean_launchers() {
	if test -d "$DATADIR"/applications/AppImages 2>/dev/null; then
		for var in "$DATADIR"/applications/AppImages/*.desktop; do
			APPIMAGENAME=$(grep "Exec=" 0<"$var" 2>/dev/null | head -1 | cut -c 6- | sed 's/\s.*$//')
			launcher2del=$(basename -- "$(echo "$APPIMAGENAME" | tr '[:upper:]' '[:lower:]')")
			MOUNTPOINTS=$(echo "$APPIMAGENAME" | cut -d'/' -f1-4)
			_clean_determine_removable_launchers
		done
		echo ' ✔ Removed orphaned launchers produced with the "--launcher" option'
		rmdir "$DATADIR"/applications/AppImages
	fi
}

function _clean_old_modules() {
	if [ "$AMCLI" = am ]; then
		MODULES=$(sort /opt/am/APP-MANAGER | tr '"' '\n' | grep "[a-z]\.am$" | uniq)
	else
		MODULES=$(sort "$AMCLIPATH" 2>/dev/null | tr '"' '\n' | grep "[a-z]\.am$" | uniq)
	fi
	for m in "$APPSPATH"/"$AMCLI"/modules/*; do
		if [[ "${MODULES}" != *"$(basename -- "$m")"* ]];then
			rm -f "$m" 2>/dev/null
			echo " ✔ Removed obsolete module named \"$(basename -- "$m")\""
		fi
	done
}

function _clean_and_remove_old_am_cache_directory() {
	rm -f "$AMPATH"/{betatester,*list*,options,.cache/*}
	if test -d "$AMPATH/.cache"; then
		rmdir "$AMPATH"/.cache
		echo " ✔ Removed no more needed $AMPATH/.cache directory"
	fi
}

function _use_clean() {
	echo " Cleaning temporary files and folders..." && sleep 0.1 &&
	for i in {100..000}; do
		echo -ne " $i\r" && sleep 0.0001
	done
	_clean_amcachedir_message
	_clean_all_home_cache_directories_of_appimages
	_clean_all_tmp_directories_from_appspath
	_clean_launchers 2>/dev/null
	_clean_old_modules
	_clean_and_remove_old_am_cache_directory
}

# FORCE "LATEST" RELEASE FOR APPS INSTALLED FROM GITHUB
function _use_force_latest() {
  	_online_check
	ARGS="$(echo "$@" | cut -f2- -d ' ')"
  	for arg in $ARGS; do
	  	if ! test -d "$APPSPATH"/"$arg"; then
			echo " ERROR: \"$arg\" is not installed, see \"-f\""
		elif ! test -f "$APPSPATH"/"$arg"/AM-updater; then
			echo " ERROR: \"$AMCLI\" cannot manage updates for \"$arg\""
		elif ! grep -q "api.github.com" "$APPSPATH"/"$arg"/AM-updater; then
			echo " ERROR: \"$arg\" source is not on Github"
		elif ! grep -q "/releases | " "$APPSPATH"/"$arg"/AM-updater; then
			echo " ERROR: \"$arg\" does not redirect to a generic \"releases\""
		else
			sed -i 's#/releases | #/releases/latest | #g' "$APPSPATH"/"$arg"/AM-updater
			"$AMCLIPATH" -u "$arg"
		fi
	done
}

#HELP
function _use_help() {
	_if_appman_mode_enabled
	printf "
NAME: ${Green}$AMCLIUPPER\033[0m		\
VERSION: ${Green}$AMVERSION\033[0m

SYNOPSIS:	${LightBlue}$AMCLI {OPTION}\033[0m
		${LightBlue}$AMCLI {OPTION} {PROGRAM}\033[0m

DESCRIPTION: A command line utility to install and manage AppImages and other \
portable programs for GNU/Linux thanks to its AUR-inspired database.

OPTIONS:
 
${Gold}about, -a\033[0m

		${LightBlue}$AMCLI -a {PROGRAM}\033[0m

Description: Shows more info about one or more apps.

${Gold}apikey\033[0m

		${LightBlue}$AMCLI apikey {Github Token}
		${LightBlue}$AMCLI apikey delete\033[0m

Description: Accede to github APIs using your personal access tokens. The \
file named \"ghapikey.txt\" will be saved in $AMDATADIR. Use \"del\" to remove it.

${Gold}backup, -b\033[0m

		${LightBlue}$AMCLI -b {PROGRAM}\033[0m

Description: Create a snapshot of the current version of an installed program.

${Gold}clean, -c\033[0m

		${LightBlue}$AMCLI -c\033[0m

Removes all the unnecessary files and folders.

${Gold}config, -C, --config\033[0m

		${LightBlue}$AMCLI -C {PROGRAM}\033[0m

Description: Set a dedicated \$XDD_CONFIG_HOME for one or more AppImages.

${Gold}downgrade, --rollback\033[0m

		${LightBlue}$AMCLI --rollback {PROGRAM}\033[0m

Description: Download an older or specific app version.

${Gold}download, -d\033[0m

		${LightBlue}$AMCLI -d {PROGRAM}
		${LightBlue}$AMCLI -d --convert {PROGRAM}\033[0m

Description: Download one or more installation scripts to your desktop or \
convert them to local installers for \"AppMan\" (the latter must be present).

${Gold}extra, -e\033[0m

		${LightBlue}$AMCLI -e user/project {APPNAME}
		${LightBlue}$AMCLI -e user/project {APPNAME} {KEYWORD}\033[0m

Description: Install AppImages from github.com, outside the database. This \
allows you to install, update and manage them all like the others. Where \
\"user/project\" can be the whole URL to the github repository, give a name \
to the program so that it can be used from the command line. Optionally, add \
an \"univoque\" keyword if multiple AppImages are listed.

${Gold}files, -f\033[0m

		${LightBlue}$AMCLI -f
		${LightBlue}$AMCLI -f --byname
		${LightBlue}$AMCLI -f --less\033[0m

Description: Shows the list of all installed programs, with sizes. By default \
apps are sorted by size, use \"--byname\" to sort by name. With the option \
\"--less\" it shows only the number of installed apps.

${Gold}help -h\033[0m

		${LightBlue}$AMCLI -h\033[0m

Description: Prints this message.

${Gold}home, -H, --home\033[0m

		${LightBlue}$AMCLI -H {PROGRAM}\033[0m

Description: Set a dedicated \$HOME directory for one or more AppImages.

${Gold}install, -i\033[0m

		${LightBlue}$AMCLI -i {PROGRAM}
		${LightBlue}$AMCLI -i --debug {PROGRAM}
		${LightBlue}$AMCLI -i --force-latest {PROGRAM}\033[0m

Description: Install one or more programs or libraries from the list. With the \
\"--debug\" option you can see log messages to debug the script. For more \
details on \"--force-latest\", see the dedicated option, below.

${Gold}lock\033[0m

		${LightBlue}$AMCLI lock {PROGRAM}\033[0m

Description: Prevent an application being updated, if it has an\"AM-updater\" script.

${Gold}list, -l\033[0m

		${LightBlue}$AMCLI -l
		${LightBlue}$AMCLI -l --appimages\033[0m

Description: Shows the list of all the apps available, or just the AppImages.

${Gold}newrepo, neodb\033[0m

		${LightBlue}$AMCLI newrepo add {URL}\\{PATH}
		${LightBlue}$AMCLI newrepo select
		${LightBlue}$AMCLI newrepo on\\off
		${LightBlue}$AMCLI newrepo purge
		${LightBlue}$AMCLI newrepo info\033[0m

Description: Set a new default repo, use \"add\" to append the path to a local \
directory or an online URL, then use \"select\" to use it by default, a message \
will warn you about the usage of this repo instead of the default one. Use \"on\"\
/\"off\" to enable/disable it. Use \"purge\" to remove all 3rd party repos. Use \
\"info\" to see the source from where installation scripts and lists are taken.

${Gold}nolibfuse\033[0m

		${LightBlue}$AMCLI nolibfuse {PROGRAM}\033[0m

Description: Convert old AppImages and get rid of \"libfuse2\" dependence.

${Gold}overwrite, -o\033[0m

		${LightBlue}$AMCLI -o {PROGRAM}\033[0m

Description: Overwrite apps with snapshots saved previously (see \"-b\").

${Gold}query, -q\033[0m

		${LightBlue}$AMCLI -q {KEYWORD}
		${LightBlue}$AMCLI -q --appimages {KEYWORD}
		${LightBlue}$AMCLI -q --pkg {PROGRAM1} {PROGRAM2}\033[0m

Description: Search for keywords in the list of available applications, add \
the \"--appimages\" option to list only the AppImages or add \"--pkg\" to \
list multiple programs at once.

${Gold}remove, -r\033[0m

		${LightBlue}$AMCLI -r {PROGRAM}\033[0m

Description: Removes one or more apps, requires confirmation.

${Gold}-R\033[0m

		${LightBlue}$AMCLI -R {PROGRAM}\033[0m

Description: Removes one or more apps without asking.

${Gold}sandbox, --sandbox\033[0m

		${LightBlue}$AMCLI sandbox {PROGRAM}\033[0m

Description: Run an AppImage in a sandbox using Aisap.

${Gold}sync, -s\033[0m

		${LightBlue}$AMCLI -s\033[0m

Description: Updates this script to the latest version hosted.

${Gold}template, -t\033[0m

		${LightBlue}$AMCLI -t {PROGRAM}\033[0m

Description: Generate a custom installation script.

${Gold}unlock\033[0m

		${LightBlue}$AMCLI unlock {PROGRAM}\033[0m

Description: Unlock updates for the selected program (nulls \"lock\").

${Gold}update, -u, -U\033[0m

		${LightBlue}$AMCLI -u
		${LightBlue}$AMCLI -u --apps
		${LightBlue}$AMCLI -u {PROGRAM}\033[0m

Description: Update everything. Add \"--apps\" to update oly the apps or write \
only the apps you want to update by adding their names.

${Gold}version, -v\033[0m

		${LightBlue}$AMCLI -v\033[0m

Description: Shows the version.

${Gold}--devmode-disable\033[0m

		${LightBlue}$AMCLI --devmode-disable\033[0m

Description: Undo \"--devmode-enable\" (see below).

${Gold}--devmode-enable\033[0m

		${LightBlue}$AMCLI --devmode-enable\033[0m

Description: Use the development branch (at your own risk).

${Gold}--disable-sandbox\033[0m

		${LightBlue}$AMCLI --disable-sandbox {PROGRAM}\033[0m

Description: Disable the sandbox for the selected app.

${Gold}--force-latest\033[0m

		${LightBlue}$AMCLI --force-latest {PROGRAM}\033[0m

Description: Downgrades an installed app from pre-release to \"latest\".

${Gold}--launcher\033[0m

		${LightBlue}$AMCLI --launcher /path/to/\${APPIMAGE}\033[0m

Description: Drag/drop one or more AppImages in the terminal and embed them in \
the apps menu and customize a command to use from the CLI.

${Gold}--system\033[0m

		${LightBlue}am --system\033[0m

Description: Switch \"AM\" back to \"AM\" from \"AppMan Mode\" (see \"--user\").

${Gold}--user, appman\033[0m

		${LightBlue}am --user\033[0m

Description: Made \"AM\" run in \"AppMan Mode\", locally, useful for unprivileged users. This option only works with \"AM\".

$DIVIDING_LINE

 SITES:

 https://github.com/ivan-hc/AM

 https://portable-linux-apps.github.io

\n" | fold -sw 77 | sed 's/^/ /g' | less -Ir
}

# SYNCHRONIZE
function _sync_installation_scripts() {
	echo -e "$DIVIDING_LINE\n Checking for changes of the installation scripts in the online database..."
	cd "$APPSPATH" &&
	ARGS=$(find . -name 'AM-updater' -printf "%h\n" 2>/dev/null | sort -u | cut -c 3-)
	for arg in $ARGS; do
		mkdir -p "$APPSPATH/$arg/.am-installer"
		if test -f "$APPSPATH/$arg/.am-installer"/*; then
			scriptname=$(ls "$APPSPATH/$arg/.am-installer/" | head -1)
			CURRENT=$(cat "$APPSPATH"/"$arg"/.am-installer/"$scriptname")
			SOURCE=$(curl -Ls "$APPSDB"/"$scriptname")
			if [ "$CURRENT" = "$SOURCE" ]; then
				echo -ne "\r" 2>/dev/null
			else
				echo -e " ◆ Changed https://github.com/ivan-hc/AM/blob/main/programs/$arch/$scriptname"
			fi
		else
			if curl --output /dev/null --silent --head --fail "$APPSDB"/"$arg"  1>/dev/null; then
				echo -e " ◆ No installation script for $arg, downloading one..."
				mkdir -p "$APPSPATH/$arg/.am-installer"
				wget -q "$APPSDB/$arg" -O "$APPSPATH/$arg/.am-installer/$arg"
			fi
		fi
	done
}

function _sync_modules() {
	echo -e "$DIVIDING_LINE\n Check for updates in modules..."
	MODULES=$(curl -Ls "$AMREPO/APP-MANAGER" | tr '"' '\n' | grep "[a-z]\.am$")
	for module_name in $MODULES; do
		cd "$AMPATH"/modules || return
		if ! test -f ./"$module_name"; then
			echo " ◆ Downloading $module_name (not previously installed)..."
			curl -Os "$AMREPO/modules/$module_name" 2>/dev/null
			chmod a+x ./"$MODULENAME"
		fi
		CURRENT=$(cat ./"$module_name" 2>/dev/null)
		SOURCE=$(curl -Ls "$AMREPO/modules/$module_name")
		if [ "$CURRENT" = "$SOURCE" ]; then
			echo -ne "\r" 2>/dev/null
		else
			echo " ◆ Updating $module_name..."
			curl -Ls "$AMREPO/modules/$module_name" > ./"$module_name" 2>/dev/null
		fi
	done
	_clean_old_modules
}

function _sync_amcli() {
	echo "$DIVIDING_LINE"
	_completion_lists
	CURRENT_AM_VERSION="$AMVERSION"
	if [ "$AMCLIPATH" = /opt/am/appman ]; then
		rm -f /opt/am/appman
		AMCLIPATH="/opt/am/APP-MANAGER"
		CURRENT_AM_VERSION=$("$AMCLIPATH" -v)
	fi
	echo -ne "\n ◆ SYNCHRONIZING \"$AMCLIUPPER\" VERSION \"$CURRENT_AM_VERSION\"...\r" && sleep 0.25
	_clean_amcachedir 1>/dev/null
	cd "$AMCACHEDIR" || return
	if [ "$AMCLI" = am ]; then
		curl -Ls "$AMREPO"/APP-MANAGER > ./APP-MANAGER && chmod a+x ./APP-MANAGER
		cd ..
		echo y | mv "$AMCACHEDIR"/APP-MANAGER /opt/am/APP-MANAGER
	else
		curl -Ls "$AMREPO"/APP-MANAGER > ./appman && chmod a+x ./"$AMCLI"
		cd ..
		echo y | mv "$AMCACHEDIR"/"$AMCLI" "$AMCLIPATH" 2>/dev/null
	fi
	NEW_AM_VERSION=$("$AMCLIPATH" -v)
	if [ ! "$CURRENT_AM_VERSION" = "$NEW_AM_VERSION" ]; then
		echo -ne " A new release of \"$AMCLIUPPER\" is available, please wait...\r"
		echo " ◆ \"$AMCLIUPPER\" IS NOW UPDATED TO THE BRAND NEW \"$NEW_AM_VERSION\" VERSION!"
		echo -e "\n  Replacement of version \"$CURRENT_AM_VERSION\" currently in use, COMPLETED!"
		echo -e "\n See https://github.com/ivan-hc/AM/commits/main\n"
	else
		echo " ◆ \"$AMCLIUPPER\" IS ALREADY UPDATED, CURRENT VERSION \"$CURRENT_AM_VERSION\""
		echo -e "\n See https://github.com/ivan-hc/AM/commits/$AMBRANCH\n"
	fi
}

function _use_sync() {
	_online_check
	_betatester_message_on
	_sync_installation_scripts
	if [ "$(realpath $0)" != "/usr/bin/am" ]; then
		_sync_modules
		_sync_amcli
	fi
}

# UPDATE
function _list_updatable_apps() {
	_check_version
	cd "$APPSPATH" &&
	ARGS=$(find . -name 'AM-updater' -printf " %h\n" 2>/dev/null | sort -u | xargs -n 1 basename 2>/dev/null)
	for arg in $ARGS; do
		app_version=$(grep -w " ◆ $arg	|" "$AMCACHEDIR/version-args" | sed 's:.*|	::')
		echo " ◆ $arg $app_version" >> "$AMCACHEDIR"/updatable-args-list
	done
}

function _update_all_apps() {
	for f in "$APPSPATH"/*/; do
		cd "$f" 2>/dev/null &&
		if test -f ./AM-updater; then
			appname=$(printf '%s\n' "${PWD##*/}")
			APPNAME=$(echo "$appname" | tr '[:lower:]' '[:upper:]')
			if [ -w ./AM-updater ]; then
				start=$(date +%s) &&
				sh -x ./AM-updater >/dev/null 2>&1 | echo -ne ' Updating "'"$APPNAME"'"...\r' &&
				end=$(date +%s) &&
				echo " ◆ $APPNAME is updated, $((end - start)) seconds elapsed!" &
			else
				echo " ✖ $APPNAME is read-only, cannot update it!"
			fi
		else
			echo ""  >/dev/null 2>&1
		fi
	done
	wait
	echo "$DIVIDING_LINE"
	if test -f "$AMCACHEDIR"/updatable-args-list; then
		mv "$AMCACHEDIR"/updatable-args-list "$AMCACHEDIR"/updatable-args-list-old
		_list_updatable_apps
		OLDVER="$AMCACHEDIR/updatable-args-list-old"
		NEWVER="$AMCACHEDIR/updatable-args-list"
		if cmp --silent -- "$NEWVER" "$OLDVER"; then
			echo ' Nothing to do here!'
		else
			echo -e " The following apps have been updated:\n"
			diff --new-line-format="" --unchanged-line-format="" "$NEWVER" "$OLDVER"
			echo ""
		fi
	else
		echo ' No apps to update here!'
	fi
	rm -Rf "$APPSPATH/*/tmp"
}

function _use_update() {
	_online_check
	_update_github_api_key_in_the_updater_files
	case $2 in
	''|'--apps')
		_clean_amcachedir
		_list_updatable_apps
		echo -e "$DIVIDING_LINE\n \"$AMCLIUPPER\" CAN MANAGE UPDATES FOR THE FOLLOWING PROGRAMS:\n"
		[ -f "$AMCACHEDIR/updatable-args-list" ] && cat "$AMCACHEDIR/updatable-args-list" || echo " None"
		echo -e "\n All self-updatable programs are excluded"
		echo -e "$DIVIDING_LINE\n >> START OF ALL PROCESSES <<\n$DIVIDING_LINE"
		_update_all_apps
		[ -z "$2" ] &&	echo "$DIVIDING_LINE" && _use_sync
		echo -e "$DIVIDING_LINE\n >> END OF ALL PROCESSES << \n$DIVIDING_LINE"
		sleep 0.2
		exit
		;;
	*)
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			arg_upper=$(echo "$arg" | tr '[:lower:]' '[:upper:]')
			if test -f "$APPSPATH"/"$arg"/AM-updater; then
				if [ -w "$APPSPATH"/"$arg"/AM-updater ]; then
					start=$(date +%s)
					"$APPSPATH"/"$arg"/AM-updater >/dev/null 2>&1 | echo -ne " UPDATING $arg_upper\r"
					end=$(date +%s)
					echo " ◆ $arg_upper is updated, $((end - start)) seconds elapsed!"
					_clean_amcachedir
					_list_updatable_apps
				else
					echo " - $arg_upper is read-only, cannot update it!"
				fi
			else
				UPDATERS=$(cd "$APPSPATH"/"$arg" 2>/dev/null && find . -name "*update*" -print 2>/dev/null)
				[ -n "$UPDATERS" ] && arg_autoupdatable=", it may have its update system"
				echo " ✖ Cannot manage updates for \"$arg_upper\"$arg_autoupdatable"
			fi
		done
		;;
	esac
}

################################################################################
#				USAGE
################################################################################

# HANDLE ALL THE EXTERNAL MODULES
function _use_module() {
	# Test if module exists
	if [ ! -f "$AMPATH/modules/$MODULE" ]; then
		_online_check
		if ! wget -q "$AMREPO/modules/$MODULE" -O "$AMPATH/modules/$MODULE"; then
			echo " Module not found, run \"$AMCLI -s\" to update \"$AMCLIUPPER\""
			exit 1
		fi
		chmod a+x "$AMPATH/modules/$MODULE"
	fi
	# Source module
	source "$AMPATH/modules/$MODULE" "$@"
}

[ -z "$1" ] && echo " USAGE: $AMCLI [OPTION]" && echo "        $AMCLI [OPTION] [ARGUMENT]" &&
	echo "" && echo " Run the \"$AMCLI -h\" command to find out more" && exit 1

case "$1" in
	'about'|'-a'|\
	'files'|'-f'|\
	'list'|'-l'|\
	'query'|'-q')
		MODULE="database.am"
		_use_module "$@"
		;;
	'backup'|'-b'|\
	'downgrade'|'--rollback'|\
	'launcher'|'--launcher'|\
	'lock'|'unlock'|\
	'nolibfuse'|\
	'overwrite'|'-o'|\
	'remove'|'-R'|'-r')
		MODULE="management.am"
		_use_module "$@"
		;;
	'config'|'-C'|'--config'|\
	'home'|'-H'|'--home'|\
	'sandbox'|'--sandbox'|\
	'--disable-sandbox')
		MODULE="sandboxes.am"
		_use_module "$@"
		;;
	'download'|'-d'|\
	'extra'|'-e'|\
	'install'|'-i')
		MODULE="install.am"
		_online_check
		_if_appman_mode_enabled
		_use_module "$@"
		;;
	'template'|'-t')
		MODULE="template.am"
		_online_check
		_use_module "$@"
		;;
	# INBUILT OPTIONS
	'--devmode-disable'|'--devmode-enable')
		_use_beta_tester "$@"
		;;
	'--force-latest')
		_use_force_latest "$@"
		;;
	'--system')
		_use_am_again
		;;
	'apikey')
		_use_apikey "$@"
		;;
	'appman'|'--user')
		_use_appman
		;;
	'clean'|'-c')
		_use_clean
		;;
	'help'|'-h')
		_use_help
		;;
	'newrepo'|'neodb')
		_use_newrepo "$@"
		;;
	'sync'|'-s')
		_use_sync
		;;
	'update'|'-u'|'-U')
		_use_update "$@"
		;;
	'version'|'-v'|'--version')
		echo "$AMVERSION"
		;;
	*)
		exec "$AMCLIPATH"
		;;
esac

# vim:tabstop=4:shiftwidth=4:expandtab
